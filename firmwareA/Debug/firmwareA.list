
firmwareA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a8  0800810c  0800810c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800a7b4  0800a7b4  000037b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e0  0800a7e0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7e0  0800a7e0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7e0  0800a7e0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e0  0800a7e0  000037e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7e4  0800a7e4  000037e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800a7e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004910  20000010  0800a7f4  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004920  0800a7f4  00004920  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cd6  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bf  00000000  00000000  0000dd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0000fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076d  00000000  00000000  000107a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001777b  00000000  00000000  00010f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf16  00000000  00000000  00028690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084daf  00000000  00000000  000345a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9355  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000263c  00000000  00000000  000b9398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000bb9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	@ (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	@ (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000010 	.word	0x20000010
 8008128:	00000000 	.word	0x00000000
 800812c:	0800a79c 	.word	0x0800a79c

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	@ (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	@ (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000014 	.word	0x20000014
 8008148:	0800a79c 	.word	0x0800a79c

0800814c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008150:	4b17      	ldr	r3, [pc, #92]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008152:	4a18      	ldr	r2, [pc, #96]	@ (80081b4 <MX_CAN_Init+0x68>)
 8008154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8008156:	4b16      	ldr	r3, [pc, #88]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008158:	2204      	movs	r2, #4
 800815a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800815c:	4b14      	ldr	r3, [pc, #80]	@ (80081b0 <MX_CAN_Init+0x64>)
 800815e:	2200      	movs	r2, #0
 8008160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008162:	4b13      	ldr	r3, [pc, #76]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008164:	2200      	movs	r2, #0
 8008166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8008168:	4b11      	ldr	r3, [pc, #68]	@ (80081b0 <MX_CAN_Init+0x64>)
 800816a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800816e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8008170:	4b0f      	ldr	r3, [pc, #60]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008172:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008178:	4b0d      	ldr	r3, [pc, #52]	@ (80081b0 <MX_CAN_Init+0x64>)
 800817a:	2200      	movs	r2, #0
 800817c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800817e:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008180:	2200      	movs	r2, #0
 8008182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008184:	4b0a      	ldr	r3, [pc, #40]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008186:	2200      	movs	r2, #0
 8008188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800818a:	4b09      	ldr	r3, [pc, #36]	@ (80081b0 <MX_CAN_Init+0x64>)
 800818c:	2200      	movs	r2, #0
 800818e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008192:	2200      	movs	r2, #0
 8008194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008196:	4b06      	ldr	r3, [pc, #24]	@ (80081b0 <MX_CAN_Init+0x64>)
 8008198:	2200      	movs	r2, #0
 800819a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <MX_CAN_Init+0x64>)
 800819e:	f000 fddd 	bl	8008d5c <HAL_CAN_Init>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80081a8:	f000 fc48 	bl	8008a3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80081ac:	bf00      	nop
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	2000002c 	.word	0x2000002c
 80081b4:	40006400 	.word	0x40006400

080081b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c0:	f107 0310 	add.w	r3, r7, #16
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	605a      	str	r2, [r3, #4]
 80081ca:	609a      	str	r2, [r3, #8]
 80081cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008244 <HAL_CAN_MspInit+0x8c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d131      	bne.n	800823c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80081d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008248 <HAL_CAN_MspInit+0x90>)
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008248 <HAL_CAN_MspInit+0x90>)
 80081de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80081e2:	61d3      	str	r3, [r2, #28]
 80081e4:	4b18      	ldr	r3, [pc, #96]	@ (8008248 <HAL_CAN_MspInit+0x90>)
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081f0:	4b15      	ldr	r3, [pc, #84]	@ (8008248 <HAL_CAN_MspInit+0x90>)
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	4a14      	ldr	r2, [pc, #80]	@ (8008248 <HAL_CAN_MspInit+0x90>)
 80081f6:	f043 0304 	orr.w	r3, r3, #4
 80081fa:	6193      	str	r3, [r2, #24]
 80081fc:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <HAL_CAN_MspInit+0x90>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008208:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800820c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800820e:	2300      	movs	r3, #0
 8008210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008212:	2300      	movs	r3, #0
 8008214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008216:	f107 0310 	add.w	r3, r7, #16
 800821a:	4619      	mov	r1, r3
 800821c:	480b      	ldr	r0, [pc, #44]	@ (800824c <HAL_CAN_MspInit+0x94>)
 800821e:	f001 fbcb 	bl	80099b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008228:	2302      	movs	r3, #2
 800822a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800822c:	2303      	movs	r3, #3
 800822e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008230:	f107 0310 	add.w	r3, r7, #16
 8008234:	4619      	mov	r1, r3
 8008236:	4805      	ldr	r0, [pc, #20]	@ (800824c <HAL_CAN_MspInit+0x94>)
 8008238:	f001 fbbe 	bl	80099b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800823c:	bf00      	nop
 800823e:	3720      	adds	r7, #32
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40006400 	.word	0x40006400
 8008248:	40021000 	.word	0x40021000
 800824c:	40010800 	.word	0x40010800

08008250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	605a      	str	r2, [r3, #4]
 8008260:	609a      	str	r2, [r3, #8]
 8008262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008264:	4b2d      	ldr	r3, [pc, #180]	@ (800831c <MX_GPIO_Init+0xcc>)
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	4a2c      	ldr	r2, [pc, #176]	@ (800831c <MX_GPIO_Init+0xcc>)
 800826a:	f043 0310 	orr.w	r3, r3, #16
 800826e:	6193      	str	r3, [r2, #24]
 8008270:	4b2a      	ldr	r3, [pc, #168]	@ (800831c <MX_GPIO_Init+0xcc>)
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800827c:	4b27      	ldr	r3, [pc, #156]	@ (800831c <MX_GPIO_Init+0xcc>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	4a26      	ldr	r2, [pc, #152]	@ (800831c <MX_GPIO_Init+0xcc>)
 8008282:	f043 0320 	orr.w	r3, r3, #32
 8008286:	6193      	str	r3, [r2, #24]
 8008288:	4b24      	ldr	r3, [pc, #144]	@ (800831c <MX_GPIO_Init+0xcc>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008294:	4b21      	ldr	r3, [pc, #132]	@ (800831c <MX_GPIO_Init+0xcc>)
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	4a20      	ldr	r2, [pc, #128]	@ (800831c <MX_GPIO_Init+0xcc>)
 800829a:	f043 0304 	orr.w	r3, r3, #4
 800829e:	6193      	str	r3, [r2, #24]
 80082a0:	4b1e      	ldr	r3, [pc, #120]	@ (800831c <MX_GPIO_Init+0xcc>)
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ac:	4b1b      	ldr	r3, [pc, #108]	@ (800831c <MX_GPIO_Init+0xcc>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	4a1a      	ldr	r2, [pc, #104]	@ (800831c <MX_GPIO_Init+0xcc>)
 80082b2:	f043 0308 	orr.w	r3, r3, #8
 80082b6:	6193      	str	r3, [r2, #24]
 80082b8:	4b18      	ldr	r3, [pc, #96]	@ (800831c <MX_GPIO_Init+0xcc>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	603b      	str	r3, [r7, #0]
 80082c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80082c4:	2200      	movs	r2, #0
 80082c6:	2120      	movs	r1, #32
 80082c8:	4815      	ldr	r0, [pc, #84]	@ (8008320 <MX_GPIO_Init+0xd0>)
 80082ca:	f001 fcf9 	bl	8009cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80082ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80082d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80082d4:	4b13      	ldr	r3, [pc, #76]	@ (8008324 <MX_GPIO_Init+0xd4>)
 80082d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80082dc:	f107 0310 	add.w	r3, r7, #16
 80082e0:	4619      	mov	r1, r3
 80082e2:	4811      	ldr	r0, [pc, #68]	@ (8008328 <MX_GPIO_Init+0xd8>)
 80082e4:	f001 fb68 	bl	80099b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80082e8:	2320      	movs	r3, #32
 80082ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082f4:	2302      	movs	r3, #2
 80082f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	4619      	mov	r1, r3
 80082fe:	4808      	ldr	r0, [pc, #32]	@ (8008320 <MX_GPIO_Init+0xd0>)
 8008300:	f001 fb5a 	bl	80099b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008304:	2200      	movs	r2, #0
 8008306:	2100      	movs	r1, #0
 8008308:	2028      	movs	r0, #40	@ 0x28
 800830a:	f001 f91e 	bl	800954a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800830e:	2028      	movs	r0, #40	@ 0x28
 8008310:	f001 f937 	bl	8009582 <HAL_NVIC_EnableIRQ>

}
 8008314:	bf00      	nop
 8008316:	3720      	adds	r7, #32
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40021000 	.word	0x40021000
 8008320:	40010800 	.word	0x40010800
 8008324:	10110000 	.word	0x10110000
 8008328:	40011000 	.word	0x40011000

0800832c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008330:	f3bf 8f4f 	dsb	sy
}
 8008334:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008336:	4b06      	ldr	r3, [pc, #24]	@ (8008350 <__NVIC_SystemReset+0x24>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800833e:	4904      	ldr	r1, [pc, #16]	@ (8008350 <__NVIC_SystemReset+0x24>)
 8008340:	4b04      	ldr	r3, [pc, #16]	@ (8008354 <__NVIC_SystemReset+0x28>)
 8008342:	4313      	orrs	r3, r2
 8008344:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008346:	f3bf 8f4f 	dsb	sy
}
 800834a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800834c:	bf00      	nop
 800834e:	e7fd      	b.n	800834c <__NVIC_SystemReset+0x20>
 8008350:	e000ed00 	.word	0xe000ed00
 8008354:	05fa0004 	.word	0x05fa0004

08008358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08c      	sub	sp, #48	@ 0x30
 800835c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800835e:	f000 fc77 	bl	8008c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008362:	f000 f893 	bl	800848c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  NVIC_Config();
 8008366:	f000 f971 	bl	800864c <NVIC_Config>

  HAL_PWR_EnableBkUpAccess();
 800836a:	f001 fce3 	bl	8009d34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BKP_CLK_ENABLE();
 800836e:	4b40      	ldr	r3, [pc, #256]	@ (8008470 <main+0x118>)
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	4a3f      	ldr	r2, [pc, #252]	@ (8008470 <main+0x118>)
 8008374:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008378:	61d3      	str	r3, [r2, #28]
 800837a:	4b3d      	ldr	r3, [pc, #244]	@ (8008470 <main+0x118>)
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008386:	f7ff ff63 	bl	8008250 <MX_GPIO_Init>
  MX_CAN_Init();
 800838a:	f7ff fedf 	bl	800814c <MX_CAN_Init>
  MX_USART2_UART_Init();
 800838e:	f000 fbd1 	bl	8008b34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK){
 8008392:	4838      	ldr	r0, [pc, #224]	@ (8008474 <main+0x11c>)
 8008394:	f000 fea6 	bl	80090e4 <HAL_CAN_Start>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <main+0x4a>
	  Error_Handler();
 800839e:	f000 fb4d 	bl	8008a3c <Error_Handler>
  }

  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80083a2:	2301      	movs	r3, #1
 80083a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  canFilterConfig.FilterBank = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterIdHigh = 0x0000;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow = 0x0000;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh = 0x0000;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80083be:	2300      	movs	r3, #0
 80083c0:	623b      	str	r3, [r7, #32]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80083c2:	2301      	movs	r3, #1
 80083c4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK)
 80083c6:	f107 0308 	add.w	r3, r7, #8
 80083ca:	4619      	mov	r1, r3
 80083cc:	4829      	ldr	r0, [pc, #164]	@ (8008474 <main+0x11c>)
 80083ce:	f000 fdc0 	bl	8008f52 <HAL_CAN_ConfigFilter>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <main+0x84>
  {
	  Error_Handler();
 80083d8:	f000 fb30 	bl	8008a3c <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80083dc:	2102      	movs	r1, #2
 80083de:	4825      	ldr	r0, [pc, #148]	@ (8008474 <main+0x11c>)
 80083e0:	f000 ffb6 	bl	8009350 <HAL_CAN_ActivateNotification>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <main+0x96>
	  Error_Handler();
 80083ea:	f000 fb27 	bl	8008a3c <Error_Handler>
  }

  SendFirmwareStartedMessage();
 80083ee:	f000 f8fb 	bl	80085e8 <SendFirmwareStartedMessage>
  TxHeader.DLC = 8;
 80083f2:	4b21      	ldr	r3, [pc, #132]	@ (8008478 <main+0x120>)
 80083f4:	2208      	movs	r2, #8
 80083f6:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80083f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008478 <main+0x120>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80083fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008478 <main+0x120>)
 8008400:	2200      	movs	r2, #0
 8008402:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x80;
 8008404:	4b1c      	ldr	r3, [pc, #112]	@ (8008478 <main+0x120>)
 8008406:	2280      	movs	r2, #128	@ 0x80
 8008408:	601a      	str	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	if (fwUpdateState == FW_UPDATE_IDLE){
 800840a:	4b1c      	ldr	r3, [pc, #112]	@ (800847c <main+0x124>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d12b      	bne.n	800846a <main+0x112>
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8008412:	4b1b      	ldr	r3, [pc, #108]	@ (8008480 <main+0x128>)
 8008414:	4a1b      	ldr	r2, [pc, #108]	@ (8008484 <main+0x12c>)
 8008416:	4918      	ldr	r1, [pc, #96]	@ (8008478 <main+0x120>)
 8008418:	4816      	ldr	r0, [pc, #88]	@ (8008474 <main+0x11c>)
 800841a:	f000 fea7 	bl	800916c <HAL_CAN_AddTxMessage>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <main+0xd0>
			Error_Handler();
 8008424:	f000 fb0a 	bl	8008a3c <Error_Handler>
		}

		TxData[0] += 0x11;
 8008428:	4b16      	ldr	r3, [pc, #88]	@ (8008484 <main+0x12c>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	3311      	adds	r3, #17
 800842e:	b2da      	uxtb	r2, r3
 8008430:	4b14      	ldr	r3, [pc, #80]	@ (8008484 <main+0x12c>)
 8008432:	701a      	strb	r2, [r3, #0]
		TxData[1] += 0x12;
 8008434:	4b13      	ldr	r3, [pc, #76]	@ (8008484 <main+0x12c>)
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	3312      	adds	r3, #18
 800843a:	b2da      	uxtb	r2, r3
 800843c:	4b11      	ldr	r3, [pc, #68]	@ (8008484 <main+0x12c>)
 800843e:	705a      	strb	r2, [r3, #1]
		TxData[2] += 0x13;
 8008440:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <main+0x12c>)
 8008442:	789b      	ldrb	r3, [r3, #2]
 8008444:	3313      	adds	r3, #19
 8008446:	b2da      	uxtb	r2, r3
 8008448:	4b0e      	ldr	r3, [pc, #56]	@ (8008484 <main+0x12c>)
 800844a:	709a      	strb	r2, [r3, #2]
		HAL_Delay(100);
 800844c:	2064      	movs	r0, #100	@ 0x64
 800844e:	f000 fc61 	bl	8008d14 <HAL_Delay>

		LD2Counter++;
 8008452:	4b0d      	ldr	r3, [pc, #52]	@ (8008488 <main+0x130>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	b2da      	uxtb	r2, r3
 800845a:	4b0b      	ldr	r3, [pc, #44]	@ (8008488 <main+0x130>)
 800845c:	701a      	strb	r2, [r3, #0]
		if (LD2Counter > 100)
 800845e:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <main+0x130>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b64      	cmp	r3, #100	@ 0x64
 8008464:	d901      	bls.n	800846a <main+0x112>
			LD2Flip();
 8008466:	f000 f877 	bl	8008558 <LD2Flip>
	}
	FirmwareUpdateStateMachine();
 800846a:	f000 fa25 	bl	80088b8 <FirmwareUpdateStateMachine>
	if (fwUpdateState == FW_UPDATE_IDLE){
 800846e:	e7cc      	b.n	800840a <main+0xb2>
 8008470:	40021000 	.word	0x40021000
 8008474:	2000002c 	.word	0x2000002c
 8008478:	20000054 	.word	0x20000054
 800847c:	20000078 	.word	0x20000078
 8008480:	20000074 	.word	0x20000074
 8008484:	2000006c 	.word	0x2000006c
 8008488:	20000088 	.word	0x20000088

0800848c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b092      	sub	sp, #72	@ 0x48
 8008490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008492:	f107 031c 	add.w	r3, r7, #28
 8008496:	2228      	movs	r2, #40	@ 0x28
 8008498:	2100      	movs	r1, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f002 f944 	bl	800a728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084a0:	f107 0308 	add.w	r3, r7, #8
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80084b0:	2301      	movs	r3, #1
 80084b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80084b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80084ba:	2300      	movs	r3, #0
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80084be:	2301      	movs	r3, #1
 80084c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084c2:	2302      	movs	r3, #2
 80084c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80084c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80084ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80084cc:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80084d0:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084d2:	f107 031c 	add.w	r3, r7, #28
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fc38 	bl	8009d4c <HAL_RCC_OscConfig>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80084e2:	f000 faab 	bl	8008a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084e6:	230f      	movs	r3, #15
 80084e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084ea:	2302      	movs	r3, #2
 80084ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084ee:	2300      	movs	r3, #0
 80084f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80084f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80084f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80084fc:	f107 0308 	add.w	r3, r7, #8
 8008500:	2102      	movs	r1, #2
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fea4 	bl	800a250 <HAL_RCC_ClockConfig>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800850e:	f000 fa95 	bl	8008a3c <Error_Handler>
  }

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008512:	4b0f      	ldr	r3, [pc, #60]	@ (8008550 <SystemClock_Config+0xc4>)
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	4a0e      	ldr	r2, [pc, #56]	@ (8008550 <SystemClock_Config+0xc4>)
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	6193      	str	r3, [r2, #24]
 800851e:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <SystemClock_Config+0xc4>)
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800852a:	4b0a      	ldr	r3, [pc, #40]	@ (8008554 <SystemClock_Config+0xc8>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008532:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008536:	647b      	str	r3, [r7, #68]	@ 0x44
 8008538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800853a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800853e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008540:	4a04      	ldr	r2, [pc, #16]	@ (8008554 <SystemClock_Config+0xc8>)
 8008542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008544:	6053      	str	r3, [r2, #4]
}
 8008546:	bf00      	nop
 8008548:	3748      	adds	r7, #72	@ 0x48
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40021000 	.word	0x40021000
 8008554:	40010000 	.word	0x40010000

08008558 <LD2Flip>:

/* USER CODE BEGIN 4 */
void LD2Flip(void){
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
	if (ledState == 0)
 800855c:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <LD2Flip+0x38>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d108      	bne.n	8008576 <LD2Flip+0x1e>
	{
		ledState = 1;
 8008564:	4b0a      	ldr	r3, [pc, #40]	@ (8008590 <LD2Flip+0x38>)
 8008566:	2201      	movs	r2, #1
 8008568:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 800856a:	2201      	movs	r2, #1
 800856c:	2120      	movs	r1, #32
 800856e:	4809      	ldr	r0, [pc, #36]	@ (8008594 <LD2Flip+0x3c>)
 8008570:	f001 fba6 	bl	8009cc0 <HAL_GPIO_WritePin>
 8008574:	e007      	b.n	8008586 <LD2Flip+0x2e>
	}
	else
	{
		ledState = 0;
 8008576:	4b06      	ldr	r3, [pc, #24]	@ (8008590 <LD2Flip+0x38>)
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800857c:	2200      	movs	r2, #0
 800857e:	2120      	movs	r1, #32
 8008580:	4804      	ldr	r0, [pc, #16]	@ (8008594 <LD2Flip+0x3c>)
 8008582:	f001 fb9d 	bl	8009cc0 <HAL_GPIO_WritePin>
	}
	LD2Counter = 0;
 8008586:	4b04      	ldr	r3, [pc, #16]	@ (8008598 <LD2Flip+0x40>)
 8008588:	2200      	movs	r2, #0
 800858a:	701a      	strb	r2, [r3, #0]
}
 800858c:	bf00      	nop
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000089 	.word	0x20000089
 8008594:	40010800 	.word	0x40010800
 8008598:	20000088 	.word	0x20000088

0800859c <SetBootFlag>:
void SetBootFlag(void){
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();
 80085a2:	f001 fbc7 	bl	8009d34 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_BKP_CLK_ENABLE();
 80085a6:	4b0e      	ldr	r3, [pc, #56]	@ (80085e0 <SetBootFlag+0x44>)
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	4a0d      	ldr	r2, [pc, #52]	@ (80085e0 <SetBootFlag+0x44>)
 80085ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085b0:	61d3      	str	r3, [r2, #28]
 80085b2:	4b0b      	ldr	r3, [pc, #44]	@ (80085e0 <SetBootFlag+0x44>)
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
	uint32_t boot_flag = BOOT_FLAG_ADDR;
 80085be:	4b09      	ldr	r3, [pc, #36]	@ (80085e4 <SetBootFlag+0x48>)
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	607b      	str	r3, [r7, #4]
	if (boot_flag == BOOT_FLAG_A)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d103      	bne.n	80085d2 <SetBootFlag+0x36>
		BOOT_FLAG_ADDR = BOOT_FLAG_B;
 80085ca:	4b06      	ldr	r3, [pc, #24]	@ (80085e4 <SetBootFlag+0x48>)
 80085cc:	2202      	movs	r2, #2
 80085ce:	605a      	str	r2, [r3, #4]
	else
		BOOT_FLAG_ADDR = BOOT_FLAG_A;
}
 80085d0:	e002      	b.n	80085d8 <SetBootFlag+0x3c>
		BOOT_FLAG_ADDR = BOOT_FLAG_A;
 80085d2:	4b04      	ldr	r3, [pc, #16]	@ (80085e4 <SetBootFlag+0x48>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	605a      	str	r2, [r3, #4]
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40021000 	.word	0x40021000
 80085e4:	40006c00 	.word	0x40006c00

080085e8 <SendFirmwareStartedMessage>:

void SendFirmwareStartedMessage(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 80085ec:	4b13      	ldr	r3, [pc, #76]	@ (800863c <SendFirmwareStartedMessage+0x54>)
 80085ee:	227a      	movs	r2, #122	@ 0x7a
 80085f0:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 80085f2:	4b12      	ldr	r3, [pc, #72]	@ (800863c <SendFirmwareStartedMessage+0x54>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 80085f8:	4b10      	ldr	r3, [pc, #64]	@ (800863c <SendFirmwareStartedMessage+0x54>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 1;
 80085fe:	4b0f      	ldr	r3, [pc, #60]	@ (800863c <SendFirmwareStartedMessage+0x54>)
 8008600:	2201      	movs	r2, #1
 8008602:	611a      	str	r2, [r3, #16]

    txData[0] = 0x01; // 펌웨어 시작 알림 신호
 8008604:	4b0e      	ldr	r3, [pc, #56]	@ (8008640 <SendFirmwareStartedMessage+0x58>)
 8008606:	2201      	movs	r2, #1
 8008608:	701a      	strb	r2, [r3, #0]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 800860a:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <SendFirmwareStartedMessage+0x5c>)
 800860c:	4a0c      	ldr	r2, [pc, #48]	@ (8008640 <SendFirmwareStartedMessage+0x58>)
 800860e:	490b      	ldr	r1, [pc, #44]	@ (800863c <SendFirmwareStartedMessage+0x54>)
 8008610:	480d      	ldr	r0, [pc, #52]	@ (8008648 <SendFirmwareStartedMessage+0x60>)
 8008612:	f000 fdab 	bl	800916c <HAL_CAN_AddTxMessage>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <SendFirmwareStartedMessage+0x38>
    {
    	Error_Handler();
 800861c:	f000 fa0e 	bl	8008a3c <Error_Handler>
    }

    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 8008620:	bf00      	nop
 8008622:	4b08      	ldr	r3, [pc, #32]	@ (8008644 <SendFirmwareStartedMessage+0x5c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4619      	mov	r1, r3
 8008628:	4807      	ldr	r0, [pc, #28]	@ (8008648 <SendFirmwareStartedMessage+0x60>)
 800862a:	f000 fe6e 	bl	800930a <HAL_CAN_IsTxMessagePending>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1f6      	bne.n	8008622 <SendFirmwareStartedMessage+0x3a>

    }
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20004890 	.word	0x20004890
 8008640:	200048a8 	.word	0x200048a8
 8008644:	200048b0 	.word	0x200048b0
 8008648:	2000002c 	.word	0x2000002c

0800864c <NVIC_Config>:

void NVIC_Config(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008650:	2200      	movs	r2, #0
 8008652:	2100      	movs	r1, #0
 8008654:	2014      	movs	r0, #20
 8008656:	f000 ff78 	bl	800954a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800865a:	2014      	movs	r0, #20
 800865c:	f000 ff91 	bl	8009582 <HAL_NVIC_EnableIRQ>
}
 8008660:	bf00      	nop
 8008662:	bd80      	pop	{r7, pc}

08008664 <EraseFlashMemory>:
        MessageBufferPut(&rxHeader, rxData);
    }
}

void EraseFlashMemory(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800866a:	f001 f815 	bl	8009698 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	607b      	str	r3, [r7, #4]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8008672:	2300      	movs	r3, #0
 8008674:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.PageAddress = fwUpdateAddress;
 8008676:	4b0e      	ldr	r3, [pc, #56]	@ (80086b0 <EraseFlashMemory+0x4c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbPages = NUMBER_OF_PAGES_IN_PARTITION;
 800867c:	2330      	movs	r3, #48	@ 0x30
 800867e:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 8008680:	1d3a      	adds	r2, r7, #4
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f001 f8ed 	bl	8009868 <HAL_FLASHEx_Erase>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d006      	beq.n	80086a2 <EraseFlashMemory+0x3e>
    {
        HAL_FLASH_Lock();
 8008694:	f001 f826 	bl	80096e4 <HAL_FLASH_Lock>
        fwUpdateState = FW_UPDATE_IDLE;
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <EraseFlashMemory+0x50>)
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
        NVIC_SystemReset();
 800869e:	f7ff fe45 	bl	800832c <__NVIC_SystemReset>
    }

    HAL_FLASH_Lock();
 80086a2:	f001 f81f 	bl	80096e4 <HAL_FLASH_Lock>

}
 80086a6:	bf00      	nop
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	2000007c 	.word	0x2000007c
 80086b4:	20000078 	.word	0x20000078

080086b8 <StartFirmwareUpdate>:

void StartFirmwareUpdate(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0

	if (BOOT_FLAG_ADDR == BOOT_FLAG_A)
 80086bc:	4b09      	ldr	r3, [pc, #36]	@ (80086e4 <StartFirmwareUpdate+0x2c>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d103      	bne.n	80086cc <StartFirmwareUpdate+0x14>
		fwUpdateAddress = APPLICATION_B_ADDRESS;
 80086c4:	4b08      	ldr	r3, [pc, #32]	@ (80086e8 <StartFirmwareUpdate+0x30>)
 80086c6:	4a09      	ldr	r2, [pc, #36]	@ (80086ec <StartFirmwareUpdate+0x34>)
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	e002      	b.n	80086d2 <StartFirmwareUpdate+0x1a>
	else
		fwUpdateAddress = APPLICATION_A_ADDRESS;
 80086cc:	4b06      	ldr	r3, [pc, #24]	@ (80086e8 <StartFirmwareUpdate+0x30>)
 80086ce:	4a08      	ldr	r2, [pc, #32]	@ (80086f0 <StartFirmwareUpdate+0x38>)
 80086d0:	601a      	str	r2, [r3, #0]

    fwUpdateReceivedBytes = 0;
 80086d2:	4b08      	ldr	r3, [pc, #32]	@ (80086f4 <StartFirmwareUpdate+0x3c>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]

    EraseFlashMemory();
 80086d8:	f7ff ffc4 	bl	8008664 <EraseFlashMemory>

    SendInactivePartitionAddress();
 80086dc:	f000 f80c 	bl	80086f8 <SendInactivePartitionAddress>
}
 80086e0:	bf00      	nop
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40006c00 	.word	0x40006c00
 80086e8:	2000007c 	.word	0x2000007c
 80086ec:	08014000 	.word	0x08014000
 80086f0:	08008000 	.word	0x08008000
 80086f4:	20000084 	.word	0x20000084

080086f8 <SendInactivePartitionAddress>:

void SendInactivePartitionAddress(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 80086fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008778 <SendInactivePartitionAddress+0x80>)
 8008700:	227a      	movs	r2, #122	@ 0x7a
 8008702:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 8008704:	4b1c      	ldr	r3, [pc, #112]	@ (8008778 <SendInactivePartitionAddress+0x80>)
 8008706:	2200      	movs	r2, #0
 8008708:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 800870a:	4b1b      	ldr	r3, [pc, #108]	@ (8008778 <SendInactivePartitionAddress+0x80>)
 800870c:	2200      	movs	r2, #0
 800870e:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 4; // 주소 전송
 8008710:	4b19      	ldr	r3, [pc, #100]	@ (8008778 <SendInactivePartitionAddress+0x80>)
 8008712:	2204      	movs	r2, #4
 8008714:	611a      	str	r2, [r3, #16]

    uint32_t targetAddress = fwUpdateAddress;
 8008716:	4b19      	ldr	r3, [pc, #100]	@ (800877c <SendInactivePartitionAddress+0x84>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	607b      	str	r3, [r7, #4]

    txData[0] = (targetAddress >> 24) & 0xFF;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	0e1b      	lsrs	r3, r3, #24
 8008720:	b2da      	uxtb	r2, r3
 8008722:	4b17      	ldr	r3, [pc, #92]	@ (8008780 <SendInactivePartitionAddress+0x88>)
 8008724:	701a      	strb	r2, [r3, #0]
    txData[1] = (targetAddress >> 16) & 0xFF;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	0c1b      	lsrs	r3, r3, #16
 800872a:	b2da      	uxtb	r2, r3
 800872c:	4b14      	ldr	r3, [pc, #80]	@ (8008780 <SendInactivePartitionAddress+0x88>)
 800872e:	705a      	strb	r2, [r3, #1]
    txData[2] = (targetAddress >> 8) & 0xFF;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	0a1b      	lsrs	r3, r3, #8
 8008734:	b2da      	uxtb	r2, r3
 8008736:	4b12      	ldr	r3, [pc, #72]	@ (8008780 <SendInactivePartitionAddress+0x88>)
 8008738:	709a      	strb	r2, [r3, #2]
    txData[3] = (targetAddress) & 0xFF;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	b2da      	uxtb	r2, r3
 800873e:	4b10      	ldr	r3, [pc, #64]	@ (8008780 <SendInactivePartitionAddress+0x88>)
 8008740:	70da      	strb	r2, [r3, #3]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8008742:	4b10      	ldr	r3, [pc, #64]	@ (8008784 <SendInactivePartitionAddress+0x8c>)
 8008744:	4a0e      	ldr	r2, [pc, #56]	@ (8008780 <SendInactivePartitionAddress+0x88>)
 8008746:	490c      	ldr	r1, [pc, #48]	@ (8008778 <SendInactivePartitionAddress+0x80>)
 8008748:	480f      	ldr	r0, [pc, #60]	@ (8008788 <SendInactivePartitionAddress+0x90>)
 800874a:	f000 fd0f 	bl	800916c <HAL_CAN_AddTxMessage>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <SendInactivePartitionAddress+0x60>
    {
        Error_Handler();
 8008754:	f000 f972 	bl	8008a3c <Error_Handler>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 8008758:	bf00      	nop
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <SendInactivePartitionAddress+0x8c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4619      	mov	r1, r3
 8008760:	4809      	ldr	r0, [pc, #36]	@ (8008788 <SendInactivePartitionAddress+0x90>)
 8008762:	f000 fdd2 	bl	800930a <HAL_CAN_IsTxMessagePending>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1f6      	bne.n	800875a <SendInactivePartitionAddress+0x62>
	}
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20004890 	.word	0x20004890
 800877c:	2000007c 	.word	0x2000007c
 8008780:	200048a8 	.word	0x200048a8
 8008784:	200048b0 	.word	0x200048b0
 8008788:	2000002c 	.word	0x2000002c

0800878c <SendUpdateState>:

void SendUpdateState(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0

    txHeader.StdId = CAN_ID_SEND;
 8008790:	4b17      	ldr	r3, [pc, #92]	@ (80087f0 <SendUpdateState+0x64>)
 8008792:	227a      	movs	r2, #122	@ 0x7a
 8008794:	601a      	str	r2, [r3, #0]
    txHeader.RTR = CAN_RTR_DATA;
 8008796:	4b16      	ldr	r3, [pc, #88]	@ (80087f0 <SendUpdateState+0x64>)
 8008798:	2200      	movs	r2, #0
 800879a:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;
 800879c:	4b14      	ldr	r3, [pc, #80]	@ (80087f0 <SendUpdateState+0x64>)
 800879e:	2200      	movs	r2, #0
 80087a0:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 1;
 80087a2:	4b13      	ldr	r3, [pc, #76]	@ (80087f0 <SendUpdateState+0x64>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	611a      	str	r2, [r3, #16]

    if (fwUpdateComplete == 1)
 80087a8:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <SendUpdateState+0x68>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d103      	bne.n	80087ba <SendUpdateState+0x2e>
    	txData[0] = 0x02; // 완료 신호
 80087b2:	4b11      	ldr	r3, [pc, #68]	@ (80087f8 <SendUpdateState+0x6c>)
 80087b4:	2202      	movs	r2, #2
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	e002      	b.n	80087c0 <SendUpdateState+0x34>
    else
    	txData[0] = 0x03; // 실패 신호
 80087ba:	4b0f      	ldr	r3, [pc, #60]	@ (80087f8 <SendUpdateState+0x6c>)
 80087bc:	2203      	movs	r2, #3
 80087be:	701a      	strb	r2, [r3, #0]

    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 80087c0:	4b0e      	ldr	r3, [pc, #56]	@ (80087fc <SendUpdateState+0x70>)
 80087c2:	4a0d      	ldr	r2, [pc, #52]	@ (80087f8 <SendUpdateState+0x6c>)
 80087c4:	490a      	ldr	r1, [pc, #40]	@ (80087f0 <SendUpdateState+0x64>)
 80087c6:	480e      	ldr	r0, [pc, #56]	@ (8008800 <SendUpdateState+0x74>)
 80087c8:	f000 fcd0 	bl	800916c <HAL_CAN_AddTxMessage>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <SendUpdateState+0x4a>
    {
        Error_Handler();
 80087d2:	f000 f933 	bl	8008a3c <Error_Handler>
    }
    while (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)){
 80087d6:	bf00      	nop
 80087d8:	4b08      	ldr	r3, [pc, #32]	@ (80087fc <SendUpdateState+0x70>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4619      	mov	r1, r3
 80087de:	4808      	ldr	r0, [pc, #32]	@ (8008800 <SendUpdateState+0x74>)
 80087e0:	f000 fd93 	bl	800930a <HAL_CAN_IsTxMessagePending>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f6      	bne.n	80087d8 <SendUpdateState+0x4c>
    }
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20004890 	.word	0x20004890
 80087f4:	2000007a 	.word	0x2000007a
 80087f8:	200048a8 	.word	0x200048a8
 80087fc:	200048b0 	.word	0x200048b0
 8008800:	2000002c 	.word	0x2000002c

08008804 <MessageBufferIsEmpty>:
{
    return ((messageBufferHead + 1) % MESSAGE_BUFFER_SIZE) == messageBufferTail;
}

uint8_t MessageBufferIsEmpty(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
    return messageBufferHead == messageBufferTail;
 8008808:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <MessageBufferIsEmpty+0x24>)
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29a      	uxth	r2, r3
 800880e:	4b07      	ldr	r3, [pc, #28]	@ (800882c <MessageBufferIsEmpty+0x28>)
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	429a      	cmp	r2, r3
 8008816:	bf0c      	ite	eq
 8008818:	2301      	moveq	r3, #1
 800881a:	2300      	movne	r3, #0
 800881c:	b2db      	uxtb	r3, r3
}
 800881e:	4618      	mov	r0, r3
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	2000488c 	.word	0x2000488c
 800882c:	2000488e 	.word	0x2000488e

08008830 <MessageBufferGet>:
        messageBufferHead = (messageBufferHead + 1) % MESSAGE_BUFFER_SIZE;
    }
}

void MessageBufferGet(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 8008830:	b5b0      	push	{r4, r5, r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
    if (!MessageBufferIsEmpty())
 800883a:	f7ff ffe3 	bl	8008804 <MessageBufferIsEmpty>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d131      	bne.n	80088a8 <MessageBufferGet+0x78>
    {
        *rxHeader = messageBuffer[messageBufferTail].rxHeader;
 8008844:	4b1a      	ldr	r3, [pc, #104]	@ (80088b0 <MessageBufferGet+0x80>)
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	4a19      	ldr	r2, [pc, #100]	@ (80088b4 <MessageBufferGet+0x84>)
 8008850:	460b      	mov	r3, r1
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	440b      	add	r3, r1
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	4604      	mov	r4, r0
 800885c:	461d      	mov	r5, r3
 800885e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        memcpy(rxData, messageBuffer[messageBufferTail].rxData, 8);
 800886a:	4b11      	ldr	r3, [pc, #68]	@ (80088b0 <MessageBufferGet+0x80>)
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	4613      	mov	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	3318      	adds	r3, #24
 800887c:	4a0d      	ldr	r2, [pc, #52]	@ (80088b4 <MessageBufferGet+0x84>)
 800887e:	4413      	add	r3, r2
 8008880:	3304      	adds	r3, #4
 8008882:	2208      	movs	r2, #8
 8008884:	4619      	mov	r1, r3
 8008886:	6838      	ldr	r0, [r7, #0]
 8008888:	f001 ff7a 	bl	800a780 <memcpy>
        messageBufferTail = (messageBufferTail + 1) % MESSAGE_BUFFER_SIZE;
 800888c:	4b08      	ldr	r3, [pc, #32]	@ (80088b0 <MessageBufferGet+0x80>)
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	3301      	adds	r3, #1
 8008894:	425a      	negs	r2, r3
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800889e:	bf58      	it	pl
 80088a0:	4253      	negpl	r3, r2
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	4b02      	ldr	r3, [pc, #8]	@ (80088b0 <MessageBufferGet+0x80>)
 80088a6:	801a      	strh	r2, [r3, #0]
    }
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bdb0      	pop	{r4, r5, r7, pc}
 80088b0:	2000488e 	.word	0x2000488e
 80088b4:	2000008c 	.word	0x2000008c

080088b8 <FirmwareUpdateStateMachine>:

void FirmwareUpdateStateMachine(void)
{
 80088b8:	b5b0      	push	{r4, r5, r7, lr}
 80088ba:	b08c      	sub	sp, #48	@ 0x30
 80088bc:	af00      	add	r7, sp, #0
    switch (fwUpdateState)
 80088be:	4b59      	ldr	r3, [pc, #356]	@ (8008a24 <FirmwareUpdateStateMachine+0x16c>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	f000 809d 	beq.w	8008a02 <FirmwareUpdateStateMachine+0x14a>
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	f300 80a2 	bgt.w	8008a12 <FirmwareUpdateStateMachine+0x15a>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <FirmwareUpdateStateMachine+0x20>
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d00c      	beq.n	80088f0 <FirmwareUpdateStateMachine+0x38>
 80088d6:	e09c      	b.n	8008a12 <FirmwareUpdateStateMachine+0x15a>
    {
        case FW_UPDATE_IDLE:
            if (fwUpdateRequested)
 80088d8:	4b53      	ldr	r3, [pc, #332]	@ (8008a28 <FirmwareUpdateStateMachine+0x170>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 809b 	beq.w	8008a1a <FirmwareUpdateStateMachine+0x162>
            {
                StartFirmwareUpdate();
 80088e4:	f7ff fee8 	bl	80086b8 <StartFirmwareUpdate>
                fwUpdateState = FW_UPDATE_IN_PROGRESS;
 80088e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008a24 <FirmwareUpdateStateMachine+0x16c>)
 80088ea:	2202      	movs	r2, #2
 80088ec:	701a      	strb	r2, [r3, #0]

            }
            break;
 80088ee:	e094      	b.n	8008a1a <FirmwareUpdateStateMachine+0x162>

        case FW_UPDATE_IN_PROGRESS:
        	CAN_RxHeaderTypeDef rxHeader;
        	uint32_t currentAddress = fwUpdateAddress;
 80088f0:	4b4e      	ldr	r3, [pc, #312]	@ (8008a2c <FirmwareUpdateStateMachine+0x174>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	uint8_t rxData[8];

            while (fwUpdateSize > fwUpdateReceivedBytes)
 80088f6:	e063      	b.n	80089c0 <FirmwareUpdateStateMachine+0x108>
            {
            	if(!MessageBufferIsEmpty()){
 80088f8:	f7ff ff84 	bl	8008804 <MessageBufferIsEmpty>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d15e      	bne.n	80089c0 <FirmwareUpdateStateMachine+0x108>
					MessageBufferGet(&rxHeader, rxData);
 8008902:	463a      	mov	r2, r7
 8008904:	f107 0308 	add.w	r3, r7, #8
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff90 	bl	8008830 <MessageBufferGet>

					uint8_t dataLength = rxHeader.DLC;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

					HAL_FLASH_Unlock();
 8008916:	f000 febf 	bl	8009698 <HAL_FLASH_Unlock>

					for (uint8_t i = 0; i < dataLength; i += 2)
 800891a:	2300      	movs	r3, #0
 800891c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008920:	e048      	b.n	80089b4 <FirmwareUpdateStateMachine+0xfc>
					{
						uint16_t data16 = rxData[i];
 8008922:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008926:	3330      	adds	r3, #48	@ 0x30
 8008928:	443b      	add	r3, r7
 800892a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800892e:	853b      	strh	r3, [r7, #40]	@ 0x28
						if (i + 1 < dataLength)
 8008930:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800893a:	429a      	cmp	r2, r3
 800893c:	da0d      	bge.n	800895a <FirmwareUpdateStateMachine+0xa2>
						{
							data16 |= rxData[i + 1] << 8;
 800893e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008942:	3301      	adds	r3, #1
 8008944:	3330      	adds	r3, #48	@ 0x30
 8008946:	443b      	add	r3, r7
 8008948:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	b21a      	sxth	r2, r3
 8008950:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8008954:	4313      	orrs	r3, r2
 8008956:	b21b      	sxth	r3, r3
 8008958:	853b      	strh	r3, [r7, #40]	@ 0x28
						}


						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress, data16) != HAL_OK)
 800895a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800895c:	2200      	movs	r2, #0
 800895e:	461c      	mov	r4, r3
 8008960:	4615      	mov	r5, r2
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008968:	2001      	movs	r0, #1
 800896a:	f000 fe25 	bl	80095b8 <HAL_FLASH_Program>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d008      	beq.n	8008986 <FirmwareUpdateStateMachine+0xce>
						{
							HAL_FLASH_Lock();
 8008974:	f000 feb6 	bl	80096e4 <HAL_FLASH_Lock>
							fwUpdateRequested = 0;
 8008978:	4b2b      	ldr	r3, [pc, #172]	@ (8008a28 <FirmwareUpdateStateMachine+0x170>)
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
							fwUpdateState = FW_UPDATE_IDLE;
 800897e:	4b29      	ldr	r3, [pc, #164]	@ (8008a24 <FirmwareUpdateStateMachine+0x16c>)
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	e04a      	b.n	8008a1c <FirmwareUpdateStateMachine+0x164>
							return;
						}
						currentAddress += 2;
 8008986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008988:	3302      	adds	r3, #2
 800898a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						fwUpdateReceivedBytes += (i + 1 < dataLength) ? 2 : 1;
 800898c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008996:	429a      	cmp	r2, r3
 8008998:	da01      	bge.n	800899e <FirmwareUpdateStateMachine+0xe6>
 800899a:	2202      	movs	r2, #2
 800899c:	e000      	b.n	80089a0 <FirmwareUpdateStateMachine+0xe8>
 800899e:	2201      	movs	r2, #1
 80089a0:	4b23      	ldr	r3, [pc, #140]	@ (8008a30 <FirmwareUpdateStateMachine+0x178>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4413      	add	r3, r2
 80089a6:	4a22      	ldr	r2, [pc, #136]	@ (8008a30 <FirmwareUpdateStateMachine+0x178>)
 80089a8:	6013      	str	r3, [r2, #0]
					for (uint8_t i = 0; i < dataLength; i += 2)
 80089aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089ae:	3302      	adds	r3, #2
 80089b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089b4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80089b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089bc:	429a      	cmp	r2, r3
 80089be:	d3b0      	bcc.n	8008922 <FirmwareUpdateStateMachine+0x6a>
            while (fwUpdateSize > fwUpdateReceivedBytes)
 80089c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a34 <FirmwareUpdateStateMachine+0x17c>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a30 <FirmwareUpdateStateMachine+0x178>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d895      	bhi.n	80088f8 <FirmwareUpdateStateMachine+0x40>
					}
            	}
            }
            fwUpdateRequested = 0;
 80089cc:	4b16      	ldr	r3, [pc, #88]	@ (8008a28 <FirmwareUpdateStateMachine+0x170>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	701a      	strb	r2, [r3, #0]
			if (fwUpdateReceivedBytes != fwUpdateSize)
 80089d2:	4b17      	ldr	r3, [pc, #92]	@ (8008a30 <FirmwareUpdateStateMachine+0x178>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	4b17      	ldr	r3, [pc, #92]	@ (8008a34 <FirmwareUpdateStateMachine+0x17c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d005      	beq.n	80089ea <FirmwareUpdateStateMachine+0x132>
			{
				SendUpdateState();
 80089de:	f7ff fed5 	bl	800878c <SendUpdateState>
				fwUpdateState = FW_UPDATE_IDLE;
 80089e2:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <FirmwareUpdateStateMachine+0x16c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	e007      	b.n	80089fa <FirmwareUpdateStateMachine+0x142>
			}
			else{
				fwUpdateComplete = 1;
 80089ea:	4b13      	ldr	r3, [pc, #76]	@ (8008a38 <FirmwareUpdateStateMachine+0x180>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	701a      	strb	r2, [r3, #0]
				SendUpdateState();
 80089f0:	f7ff fecc 	bl	800878c <SendUpdateState>
				fwUpdateState = FW_UPDATE_COMPLETE;
 80089f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <FirmwareUpdateStateMachine+0x16c>)
 80089f6:	2203      	movs	r2, #3
 80089f8:	701a      	strb	r2, [r3, #0]
			}
			fwUpdateSize = 0;
 80089fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008a34 <FirmwareUpdateStateMachine+0x17c>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]
            break;
 8008a00:	e00c      	b.n	8008a1c <FirmwareUpdateStateMachine+0x164>

        case FW_UPDATE_COMPLETE:
        	SetBootFlag();
 8008a02:	f7ff fdcb 	bl	800859c <SetBootFlag>
			HAL_Delay(1000);
 8008a06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008a0a:	f000 f983 	bl	8008d14 <HAL_Delay>
			NVIC_SystemReset();
 8008a0e:	f7ff fc8d 	bl	800832c <__NVIC_SystemReset>
            break;

        default:
        	fwUpdateState = FW_UPDATE_IDLE;
 8008a12:	4b04      	ldr	r3, [pc, #16]	@ (8008a24 <FirmwareUpdateStateMachine+0x16c>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]
            break;
 8008a18:	e000      	b.n	8008a1c <FirmwareUpdateStateMachine+0x164>
            break;
 8008a1a:	bf00      	nop
    }
}
 8008a1c:	3730      	adds	r7, #48	@ 0x30
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bdb0      	pop	{r4, r5, r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000078 	.word	0x20000078
 8008a28:	20000079 	.word	0x20000079
 8008a2c:	2000007c 	.word	0x2000007c
 8008a30:	20000084 	.word	0x20000084
 8008a34:	20000080 	.word	0x20000080
 8008a38:	2000007a 	.word	0x2000007a

08008a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008a40:	b672      	cpsid	i
}
 8008a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8008a44:	2201      	movs	r2, #1
 8008a46:	2120      	movs	r1, #32
 8008a48:	4803      	ldr	r0, [pc, #12]	@ (8008a58 <Error_Handler+0x1c>)
 8008a4a:	f001 f939 	bl	8009cc0 <HAL_GPIO_WritePin>
  while (1)
  {
	  SetBootFlag();
 8008a4e:	f7ff fda5 	bl	800859c <SetBootFlag>
	  NVIC_SystemReset();
 8008a52:	f7ff fc6b 	bl	800832c <__NVIC_SystemReset>
 8008a56:	bf00      	nop
 8008a58:	40010800 	.word	0x40010800

08008a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008a62:	4b15      	ldr	r3, [pc, #84]	@ (8008ab8 <HAL_MspInit+0x5c>)
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	4a14      	ldr	r2, [pc, #80]	@ (8008ab8 <HAL_MspInit+0x5c>)
 8008a68:	f043 0301 	orr.w	r3, r3, #1
 8008a6c:	6193      	str	r3, [r2, #24]
 8008a6e:	4b12      	ldr	r3, [pc, #72]	@ (8008ab8 <HAL_MspInit+0x5c>)
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab8 <HAL_MspInit+0x5c>)
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8008ab8 <HAL_MspInit+0x5c>)
 8008a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a84:	61d3      	str	r3, [r2, #28]
 8008a86:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab8 <HAL_MspInit+0x5c>)
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a8e:	607b      	str	r3, [r7, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008a92:	4b0a      	ldr	r3, [pc, #40]	@ (8008abc <HAL_MspInit+0x60>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	4a04      	ldr	r2, [pc, #16]	@ (8008abc <HAL_MspInit+0x60>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	40010000 	.word	0x40010000

08008ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <NMI_Handler+0x4>

08008ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <HardFault_Handler+0x4>

08008ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ad4:	bf00      	nop
 8008ad6:	e7fd      	b.n	8008ad4 <MemManage_Handler+0x4>

08008ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <BusFault_Handler+0x4>

08008ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <UsageFault_Handler+0x4>

08008ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008aec:	bf00      	nop
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008af8:	bf00      	nop
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b04:	bf00      	nop
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bc80      	pop	{r7}
 8008b0a:	4770      	bx	lr

08008b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b10:	f000 f8e4 	bl	8008cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b14:	bf00      	nop
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008b1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008b20:	f001 f8e6 	bl	8009cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008b24:	bf00      	nop
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008b2c:	bf00      	nop
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr

08008b34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008b38:	4b11      	ldr	r3, [pc, #68]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b3a:	4a12      	ldr	r2, [pc, #72]	@ (8008b84 <MX_USART2_UART_Init+0x50>)
 8008b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008b3e:	4b10      	ldr	r3, [pc, #64]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008b46:	4b0e      	ldr	r3, [pc, #56]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008b52:	4b0b      	ldr	r3, [pc, #44]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008b58:	4b09      	ldr	r3, [pc, #36]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b5a:	220c      	movs	r2, #12
 8008b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b5e:	4b08      	ldr	r3, [pc, #32]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b64:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008b6a:	4805      	ldr	r0, [pc, #20]	@ (8008b80 <MX_USART2_UART_Init+0x4c>)
 8008b6c:	f001 fcfe 	bl	800a56c <HAL_UART_Init>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008b76:	f7ff ff61 	bl	8008a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008b7a:	bf00      	nop
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200048b4 	.word	0x200048b4
 8008b84:	40004400 	.word	0x40004400

08008b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b90:	f107 0310 	add.w	r3, r7, #16
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	605a      	str	r2, [r3, #4]
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a15      	ldr	r2, [pc, #84]	@ (8008bf8 <HAL_UART_MspInit+0x70>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d123      	bne.n	8008bf0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008ba8:	4b14      	ldr	r3, [pc, #80]	@ (8008bfc <HAL_UART_MspInit+0x74>)
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	4a13      	ldr	r2, [pc, #76]	@ (8008bfc <HAL_UART_MspInit+0x74>)
 8008bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb2:	61d3      	str	r3, [r2, #28]
 8008bb4:	4b11      	ldr	r3, [pc, #68]	@ (8008bfc <HAL_UART_MspInit+0x74>)
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8008bfc <HAL_UART_MspInit+0x74>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8008bfc <HAL_UART_MspInit+0x74>)
 8008bc6:	f043 0304 	orr.w	r3, r3, #4
 8008bca:	6193      	str	r3, [r2, #24]
 8008bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8008bfc <HAL_UART_MspInit+0x74>)
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	60bb      	str	r3, [r7, #8]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008bd8:	230c      	movs	r3, #12
 8008bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008be0:	2302      	movs	r3, #2
 8008be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be4:	f107 0310 	add.w	r3, r7, #16
 8008be8:	4619      	mov	r1, r3
 8008bea:	4805      	ldr	r0, [pc, #20]	@ (8008c00 <HAL_UART_MspInit+0x78>)
 8008bec:	f000 fee4 	bl	80099b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	40004400 	.word	0x40004400
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	40010800 	.word	0x40010800

08008c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008c04:	f7ff ff90 	bl	8008b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c08:	480b      	ldr	r0, [pc, #44]	@ (8008c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008c0a:	490c      	ldr	r1, [pc, #48]	@ (8008c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8008c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c10:	e002      	b.n	8008c18 <LoopCopyDataInit>

08008c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c16:	3304      	adds	r3, #4

08008c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c1c:	d3f9      	bcc.n	8008c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c1e:	4a09      	ldr	r2, [pc, #36]	@ (8008c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008c20:	4c09      	ldr	r4, [pc, #36]	@ (8008c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c24:	e001      	b.n	8008c2a <LoopFillZerobss>

08008c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c28:	3204      	adds	r2, #4

08008c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c2c:	d3fb      	bcc.n	8008c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008c2e:	f001 fd83 	bl	800a738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008c32:	f7ff fb91 	bl	8008358 <main>
  bx lr
 8008c36:	4770      	bx	lr
  ldr r0, =_sdata
 8008c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008c3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008c40:	0800a7e8 	.word	0x0800a7e8
  ldr r2, =_sbss
 8008c44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8008c48:	20004920 	.word	0x20004920

08008c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008c4c:	e7fe      	b.n	8008c4c <ADC1_2_IRQHandler>
	...

08008c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008c54:	4b08      	ldr	r3, [pc, #32]	@ (8008c78 <HAL_Init+0x28>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a07      	ldr	r2, [pc, #28]	@ (8008c78 <HAL_Init+0x28>)
 8008c5a:	f043 0310 	orr.w	r3, r3, #16
 8008c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c60:	2003      	movs	r0, #3
 8008c62:	f000 fc67 	bl	8009534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008c66:	2000      	movs	r0, #0
 8008c68:	f000 f808 	bl	8008c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008c6c:	f7ff fef6 	bl	8008a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40022000 	.word	0x40022000

08008c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008c84:	4b12      	ldr	r3, [pc, #72]	@ (8008cd0 <HAL_InitTick+0x54>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <HAL_InitTick+0x58>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fc7f 	bl	800959e <HAL_SYSTICK_Config>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e00e      	b.n	8008cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b0f      	cmp	r3, #15
 8008cae:	d80a      	bhi.n	8008cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	f000 fc47 	bl	800954a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008cbc:	4a06      	ldr	r2, [pc, #24]	@ (8008cd8 <HAL_InitTick+0x5c>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e000      	b.n	8008cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000000 	.word	0x20000000
 8008cd4:	20000008 	.word	0x20000008
 8008cd8:	20000004 	.word	0x20000004

08008cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ce0:	4b05      	ldr	r3, [pc, #20]	@ (8008cf8 <HAL_IncTick+0x1c>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <HAL_IncTick+0x20>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4413      	add	r3, r2
 8008cec:	4a03      	ldr	r2, [pc, #12]	@ (8008cfc <HAL_IncTick+0x20>)
 8008cee:	6013      	str	r3, [r2, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr
 8008cf8:	20000008 	.word	0x20000008
 8008cfc:	200048fc 	.word	0x200048fc

08008d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
  return uwTick;
 8008d04:	4b02      	ldr	r3, [pc, #8]	@ (8008d10 <HAL_GetTick+0x10>)
 8008d06:	681b      	ldr	r3, [r3, #0]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr
 8008d10:	200048fc 	.word	0x200048fc

08008d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d1c:	f7ff fff0 	bl	8008d00 <HAL_GetTick>
 8008d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d005      	beq.n	8008d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d58 <HAL_Delay+0x44>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d3a:	bf00      	nop
 8008d3c:	f7ff ffe0 	bl	8008d00 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d8f7      	bhi.n	8008d3c <HAL_Delay+0x28>
  {
  }
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000008 	.word	0x20000008

08008d5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e0ed      	b.n	8008f4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff fa1c 	bl	80081b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d90:	f7ff ffb6 	bl	8008d00 <HAL_GetTick>
 8008d94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d96:	e012      	b.n	8008dbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d98:	f7ff ffb2 	bl	8008d00 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b0a      	cmp	r3, #10
 8008da4:	d90b      	bls.n	8008dbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2205      	movs	r2, #5
 8008db6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e0c5      	b.n	8008f4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0e5      	beq.n	8008d98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0202 	bic.w	r2, r2, #2
 8008dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ddc:	f7ff ff90 	bl	8008d00 <HAL_GetTick>
 8008de0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008de2:	e012      	b.n	8008e0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008de4:	f7ff ff8c 	bl	8008d00 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b0a      	cmp	r3, #10
 8008df0:	d90b      	bls.n	8008e0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2205      	movs	r2, #5
 8008e02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e09f      	b.n	8008f4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7e1b      	ldrb	r3, [r3, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d108      	bne.n	8008e32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e007      	b.n	8008e42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	7e5b      	ldrb	r3, [r3, #25]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d108      	bne.n	8008e5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e007      	b.n	8008e6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7e9b      	ldrb	r3, [r3, #26]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d108      	bne.n	8008e86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0220 	orr.w	r2, r2, #32
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e007      	b.n	8008e96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0220 	bic.w	r2, r2, #32
 8008e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	7edb      	ldrb	r3, [r3, #27]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d108      	bne.n	8008eb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0210 	bic.w	r2, r2, #16
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e007      	b.n	8008ec0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0210 	orr.w	r2, r2, #16
 8008ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	7f1b      	ldrb	r3, [r3, #28]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d108      	bne.n	8008eda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0208 	orr.w	r2, r2, #8
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e007      	b.n	8008eea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0208 	bic.w	r2, r2, #8
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7f5b      	ldrb	r3, [r3, #29]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d108      	bne.n	8008f04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0204 	orr.w	r2, r2, #4
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	e007      	b.n	8008f14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0204 	bic.w	r2, r2, #4
 8008f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	ea42 0103 	orr.w	r1, r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	1e5a      	subs	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b087      	sub	sp, #28
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008f6a:	7cfb      	ldrb	r3, [r7, #19]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d003      	beq.n	8008f78 <HAL_CAN_ConfigFilter+0x26>
 8008f70:	7cfb      	ldrb	r3, [r7, #19]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	f040 80aa 	bne.w	80090cc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008f7e:	f043 0201 	orr.w	r2, r3, #1
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	2201      	movs	r2, #1
 8008f92:	fa02 f303 	lsl.w	r3, r2, r3
 8008f96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	401a      	ands	r2, r3
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d123      	bne.n	8008ffa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	43db      	mvns	r3, r3
 8008fbc:	401a      	ands	r2, r3
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008fd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	3248      	adds	r2, #72	@ 0x48
 8008fda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008fee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008ff0:	6979      	ldr	r1, [r7, #20]
 8008ff2:	3348      	adds	r3, #72	@ 0x48
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	440b      	add	r3, r1
 8008ff8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d122      	bne.n	8009048 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	431a      	orrs	r2, r3
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009022:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	3248      	adds	r2, #72	@ 0x48
 8009028:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800903c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800903e:	6979      	ldr	r1, [r7, #20]
 8009040:	3348      	adds	r3, #72	@ 0x48
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	440b      	add	r3, r1
 8009046:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d109      	bne.n	8009064 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	43db      	mvns	r3, r3
 800905a:	401a      	ands	r2, r3
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8009062:	e007      	b.n	8009074 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	431a      	orrs	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	43db      	mvns	r3, r3
 8009086:	401a      	ands	r2, r3
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800908e:	e007      	b.n	80090a0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	431a      	orrs	r2, r3
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d107      	bne.n	80090b8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	431a      	orrs	r2, r3
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80090be:	f023 0201 	bic.w	r2, r3, #1
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e006      	b.n	80090da <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
  }
}
 80090da:	4618      	mov	r0, r3
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr

080090e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d12e      	bne.n	8009156 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009110:	f7ff fdf6 	bl	8008d00 <HAL_GetTick>
 8009114:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009116:	e012      	b.n	800913e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009118:	f7ff fdf2 	bl	8008d00 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b0a      	cmp	r3, #10
 8009124:	d90b      	bls.n	800913e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2205      	movs	r2, #5
 8009136:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e012      	b.n	8009164 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e5      	bne.n	8009118 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	e006      	b.n	8009164 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
  }
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800916c:	b480      	push	{r7}
 800916e:	b089      	sub	sp, #36	@ 0x24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009180:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800918a:	7ffb      	ldrb	r3, [r7, #31]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d003      	beq.n	8009198 <HAL_CAN_AddTxMessage+0x2c>
 8009190:	7ffb      	ldrb	r3, [r7, #31]
 8009192:	2b02      	cmp	r3, #2
 8009194:	f040 80ad 	bne.w	80092f2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d105      	bne.n	80091b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8095 	beq.w	80092e2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	0e1b      	lsrs	r3, r3, #24
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80091c2:	2201      	movs	r2, #1
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	409a      	lsls	r2, r3
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10d      	bne.n	80091f0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80091de:	68f9      	ldr	r1, [r7, #12]
 80091e0:	6809      	ldr	r1, [r1, #0]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	3318      	adds	r3, #24
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	440b      	add	r3, r1
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	e00f      	b.n	8009210 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009200:	68f9      	ldr	r1, [r7, #12]
 8009202:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009204:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	3318      	adds	r3, #24
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	440b      	add	r3, r1
 800920e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6819      	ldr	r1, [r3, #0]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	3318      	adds	r3, #24
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	440b      	add	r3, r1
 8009220:	3304      	adds	r3, #4
 8009222:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	7d1b      	ldrb	r3, [r3, #20]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d111      	bne.n	8009250 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	3318      	adds	r3, #24
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	4413      	add	r3, r2
 8009238:	3304      	adds	r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	6811      	ldr	r1, [r2, #0]
 8009240:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	3318      	adds	r3, #24
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	440b      	add	r3, r1
 800924c:	3304      	adds	r3, #4
 800924e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3307      	adds	r3, #7
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	061a      	lsls	r2, r3, #24
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3306      	adds	r3, #6
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	041b      	lsls	r3, r3, #16
 8009260:	431a      	orrs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3305      	adds	r3, #5
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	4313      	orrs	r3, r2
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	3204      	adds	r2, #4
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	4610      	mov	r0, r2
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	6811      	ldr	r1, [r2, #0]
 8009278:	ea43 0200 	orr.w	r2, r3, r0
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	440b      	add	r3, r1
 8009282:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8009286:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3303      	adds	r3, #3
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	061a      	lsls	r2, r3, #24
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3302      	adds	r3, #2
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3301      	adds	r3, #1
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	4313      	orrs	r3, r2
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	4610      	mov	r0, r2
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	6811      	ldr	r1, [r2, #0]
 80092ae:	ea43 0200 	orr.w	r2, r3, r0
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	011b      	lsls	r3, r3, #4
 80092b6:	440b      	add	r3, r1
 80092b8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80092bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	3318      	adds	r3, #24
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	4413      	add	r3, r2
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	6811      	ldr	r1, [r2, #0]
 80092d0:	f043 0201 	orr.w	r2, r3, #1
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	3318      	adds	r3, #24
 80092d8:	011b      	lsls	r3, r3, #4
 80092da:	440b      	add	r3, r1
 80092dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e00e      	b.n	8009300 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e006      	b.n	8009300 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
  }
}
 8009300:	4618      	mov	r0, r3
 8009302:	3724      	adds	r7, #36	@ 0x24
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr

0800930a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800931e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d002      	beq.n	800932c <HAL_CAN_IsTxMessagePending+0x22>
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d10b      	bne.n	8009344 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	069b      	lsls	r3, r3, #26
 8009336:	401a      	ands	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	069b      	lsls	r3, r3, #26
 800933c:	429a      	cmp	r2, r3
 800933e:	d001      	beq.n	8009344 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8009340:	2301      	movs	r3, #1
 8009342:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8009344:	68fb      	ldr	r3, [r7, #12]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009360:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d002      	beq.n	800936e <HAL_CAN_ActivateNotification+0x1e>
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	2b02      	cmp	r3, #2
 800936c:	d109      	bne.n	8009382 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6959      	ldr	r1, [r3, #20]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	e006      	b.n	8009390 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009386:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
  }
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr
	...

0800939c <__NVIC_SetPriorityGrouping>:
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093ac:	4b0c      	ldr	r3, [pc, #48]	@ (80093e0 <__NVIC_SetPriorityGrouping+0x44>)
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80093b8:	4013      	ands	r3, r2
 80093ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80093c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093ce:	4a04      	ldr	r2, [pc, #16]	@ (80093e0 <__NVIC_SetPriorityGrouping+0x44>)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	60d3      	str	r3, [r2, #12]
}
 80093d4:	bf00      	nop
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	bc80      	pop	{r7}
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	e000ed00 	.word	0xe000ed00

080093e4 <__NVIC_GetPriorityGrouping>:
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80093e8:	4b04      	ldr	r3, [pc, #16]	@ (80093fc <__NVIC_GetPriorityGrouping+0x18>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	0a1b      	lsrs	r3, r3, #8
 80093ee:	f003 0307 	and.w	r3, r3, #7
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	e000ed00 	.word	0xe000ed00

08009400 <__NVIC_EnableIRQ>:
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800940a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800940e:	2b00      	cmp	r3, #0
 8009410:	db0b      	blt.n	800942a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	f003 021f 	and.w	r2, r3, #31
 8009418:	4906      	ldr	r1, [pc, #24]	@ (8009434 <__NVIC_EnableIRQ+0x34>)
 800941a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800941e:	095b      	lsrs	r3, r3, #5
 8009420:	2001      	movs	r0, #1
 8009422:	fa00 f202 	lsl.w	r2, r0, r2
 8009426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	bc80      	pop	{r7}
 8009432:	4770      	bx	lr
 8009434:	e000e100 	.word	0xe000e100

08009438 <__NVIC_SetPriority>:
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009448:	2b00      	cmp	r3, #0
 800944a:	db0a      	blt.n	8009462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	b2da      	uxtb	r2, r3
 8009450:	490c      	ldr	r1, [pc, #48]	@ (8009484 <__NVIC_SetPriority+0x4c>)
 8009452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009456:	0112      	lsls	r2, r2, #4
 8009458:	b2d2      	uxtb	r2, r2
 800945a:	440b      	add	r3, r1
 800945c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009460:	e00a      	b.n	8009478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	b2da      	uxtb	r2, r3
 8009466:	4908      	ldr	r1, [pc, #32]	@ (8009488 <__NVIC_SetPriority+0x50>)
 8009468:	79fb      	ldrb	r3, [r7, #7]
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	3b04      	subs	r3, #4
 8009470:	0112      	lsls	r2, r2, #4
 8009472:	b2d2      	uxtb	r2, r2
 8009474:	440b      	add	r3, r1
 8009476:	761a      	strb	r2, [r3, #24]
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	bc80      	pop	{r7}
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	e000e100 	.word	0xe000e100
 8009488:	e000ed00 	.word	0xe000ed00

0800948c <NVIC_EncodePriority>:
{
 800948c:	b480      	push	{r7}
 800948e:	b089      	sub	sp, #36	@ 0x24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	f1c3 0307 	rsb	r3, r3, #7
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	bf28      	it	cs
 80094aa:	2304      	movcs	r3, #4
 80094ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	3304      	adds	r3, #4
 80094b2:	2b06      	cmp	r3, #6
 80094b4:	d902      	bls.n	80094bc <NVIC_EncodePriority+0x30>
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	3b03      	subs	r3, #3
 80094ba:	e000      	b.n	80094be <NVIC_EncodePriority+0x32>
 80094bc:	2300      	movs	r3, #0
 80094be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094c0:	f04f 32ff 	mov.w	r2, #4294967295
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ca:	43da      	mvns	r2, r3
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	401a      	ands	r2, r3
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094d4:	f04f 31ff 	mov.w	r1, #4294967295
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	fa01 f303 	lsl.w	r3, r1, r3
 80094de:	43d9      	mvns	r1, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094e4:	4313      	orrs	r3, r2
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3724      	adds	r7, #36	@ 0x24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr

080094f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009500:	d301      	bcc.n	8009506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009502:	2301      	movs	r3, #1
 8009504:	e00f      	b.n	8009526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009506:	4a0a      	ldr	r2, [pc, #40]	@ (8009530 <SysTick_Config+0x40>)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3b01      	subs	r3, #1
 800950c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800950e:	210f      	movs	r1, #15
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	f7ff ff90 	bl	8009438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009518:	4b05      	ldr	r3, [pc, #20]	@ (8009530 <SysTick_Config+0x40>)
 800951a:	2200      	movs	r2, #0
 800951c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800951e:	4b04      	ldr	r3, [pc, #16]	@ (8009530 <SysTick_Config+0x40>)
 8009520:	2207      	movs	r2, #7
 8009522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	e000e010 	.word	0xe000e010

08009534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ff2d 	bl	800939c <__NVIC_SetPriorityGrouping>
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800954a:	b580      	push	{r7, lr}
 800954c:	b086      	sub	sp, #24
 800954e:	af00      	add	r7, sp, #0
 8009550:	4603      	mov	r3, r0
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	607a      	str	r2, [r7, #4]
 8009556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800955c:	f7ff ff42 	bl	80093e4 <__NVIC_GetPriorityGrouping>
 8009560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	6978      	ldr	r0, [r7, #20]
 8009568:	f7ff ff90 	bl	800948c <NVIC_EncodePriority>
 800956c:	4602      	mov	r2, r0
 800956e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009572:	4611      	mov	r1, r2
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff ff5f 	bl	8009438 <__NVIC_SetPriority>
}
 800957a:	bf00      	nop
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	4603      	mov	r3, r0
 800958a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800958c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff ff35 	bl	8009400 <__NVIC_EnableIRQ>
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff ffa2 	bl	80094f0 <SysTick_Config>
 80095ac:	4603      	mov	r3, r0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80095b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80095d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009690 <HAL_FLASH_Program+0xd8>)
 80095d4:	7e1b      	ldrb	r3, [r3, #24]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d101      	bne.n	80095de <HAL_FLASH_Program+0x26>
 80095da:	2302      	movs	r3, #2
 80095dc:	e054      	b.n	8009688 <HAL_FLASH_Program+0xd0>
 80095de:	4b2c      	ldr	r3, [pc, #176]	@ (8009690 <HAL_FLASH_Program+0xd8>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80095e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80095e8:	f000 f8a8 	bl	800973c <FLASH_WaitForLastOperation>
 80095ec:	4603      	mov	r3, r0
 80095ee:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d144      	bne.n	8009680 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d102      	bne.n	8009602 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80095fc:	2301      	movs	r3, #1
 80095fe:	757b      	strb	r3, [r7, #21]
 8009600:	e007      	b.n	8009612 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d102      	bne.n	800960e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8009608:	2302      	movs	r3, #2
 800960a:	757b      	strb	r3, [r7, #21]
 800960c:	e001      	b.n	8009612 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800960e:	2304      	movs	r3, #4
 8009610:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8009612:	2300      	movs	r3, #0
 8009614:	75bb      	strb	r3, [r7, #22]
 8009616:	e02d      	b.n	8009674 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009618:	7dbb      	ldrb	r3, [r7, #22]
 800961a:	005a      	lsls	r2, r3, #1
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	eb02 0c03 	add.w	ip, r2, r3
 8009622:	7dbb      	ldrb	r3, [r7, #22]
 8009624:	0119      	lsls	r1, r3, #4
 8009626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962a:	f1c1 0620 	rsb	r6, r1, #32
 800962e:	f1a1 0020 	sub.w	r0, r1, #32
 8009632:	fa22 f401 	lsr.w	r4, r2, r1
 8009636:	fa03 f606 	lsl.w	r6, r3, r6
 800963a:	4334      	orrs	r4, r6
 800963c:	fa23 f000 	lsr.w	r0, r3, r0
 8009640:	4304      	orrs	r4, r0
 8009642:	fa23 f501 	lsr.w	r5, r3, r1
 8009646:	b2a3      	uxth	r3, r4
 8009648:	4619      	mov	r1, r3
 800964a:	4660      	mov	r0, ip
 800964c:	f000 f85a 	bl	8009704 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009650:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009654:	f000 f872 	bl	800973c <FLASH_WaitForLastOperation>
 8009658:	4603      	mov	r3, r0
 800965a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800965c:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <HAL_FLASH_Program+0xdc>)
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	4a0c      	ldr	r2, [pc, #48]	@ (8009694 <HAL_FLASH_Program+0xdc>)
 8009662:	f023 0301 	bic.w	r3, r3, #1
 8009666:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d107      	bne.n	800967e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800966e:	7dbb      	ldrb	r3, [r7, #22]
 8009670:	3301      	adds	r3, #1
 8009672:	75bb      	strb	r3, [r7, #22]
 8009674:	7dba      	ldrb	r2, [r7, #22]
 8009676:	7d7b      	ldrb	r3, [r7, #21]
 8009678:	429a      	cmp	r2, r3
 800967a:	d3cd      	bcc.n	8009618 <HAL_FLASH_Program+0x60>
 800967c:	e000      	b.n	8009680 <HAL_FLASH_Program+0xc8>
      {
        break;
 800967e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009680:	4b03      	ldr	r3, [pc, #12]	@ (8009690 <HAL_FLASH_Program+0xd8>)
 8009682:	2200      	movs	r2, #0
 8009684:	761a      	strb	r2, [r3, #24]

  return status;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
}
 8009688:	4618      	mov	r0, r3
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009690:	20004900 	.word	0x20004900
 8009694:	40022000 	.word	0x40022000

08009698 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80096a2:	4b0d      	ldr	r3, [pc, #52]	@ (80096d8 <HAL_FLASH_Unlock+0x40>)
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00d      	beq.n	80096ca <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80096ae:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <HAL_FLASH_Unlock+0x40>)
 80096b0:	4a0a      	ldr	r2, [pc, #40]	@ (80096dc <HAL_FLASH_Unlock+0x44>)
 80096b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80096b4:	4b08      	ldr	r3, [pc, #32]	@ (80096d8 <HAL_FLASH_Unlock+0x40>)
 80096b6:	4a0a      	ldr	r2, [pc, #40]	@ (80096e0 <HAL_FLASH_Unlock+0x48>)
 80096b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80096ba:	4b07      	ldr	r3, [pc, #28]	@ (80096d8 <HAL_FLASH_Unlock+0x40>)
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80096ca:	79fb      	ldrb	r3, [r7, #7]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	40022000 	.word	0x40022000
 80096dc:	45670123 	.word	0x45670123
 80096e0:	cdef89ab 	.word	0xcdef89ab

080096e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80096e8:	4b05      	ldr	r3, [pc, #20]	@ (8009700 <HAL_FLASH_Lock+0x1c>)
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	4a04      	ldr	r2, [pc, #16]	@ (8009700 <HAL_FLASH_Lock+0x1c>)
 80096ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40022000 	.word	0x40022000

08009704 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009710:	4b08      	ldr	r3, [pc, #32]	@ (8009734 <FLASH_Program_HalfWord+0x30>)
 8009712:	2200      	movs	r2, #0
 8009714:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009716:	4b08      	ldr	r3, [pc, #32]	@ (8009738 <FLASH_Program_HalfWord+0x34>)
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	4a07      	ldr	r2, [pc, #28]	@ (8009738 <FLASH_Program_HalfWord+0x34>)
 800971c:	f043 0301 	orr.w	r3, r3, #1
 8009720:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	887a      	ldrh	r2, [r7, #2]
 8009726:	801a      	strh	r2, [r3, #0]
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	bc80      	pop	{r7}
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	20004900 	.word	0x20004900
 8009738:	40022000 	.word	0x40022000

0800973c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8009744:	f7ff fadc 	bl	8008d00 <HAL_GetTick>
 8009748:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800974a:	e010      	b.n	800976e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d00c      	beq.n	800976e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <FLASH_WaitForLastOperation+0x2e>
 800975a:	f7ff fad1 	bl	8008d00 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	429a      	cmp	r2, r3
 8009768:	d201      	bcs.n	800976e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e025      	b.n	80097ba <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800976e:	4b15      	ldr	r3, [pc, #84]	@ (80097c4 <FLASH_WaitForLastOperation+0x88>)
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e8      	bne.n	800974c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800977a:	4b12      	ldr	r3, [pc, #72]	@ (80097c4 <FLASH_WaitForLastOperation+0x88>)
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f003 0320 	and.w	r3, r3, #32
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009786:	4b0f      	ldr	r3, [pc, #60]	@ (80097c4 <FLASH_WaitForLastOperation+0x88>)
 8009788:	2220      	movs	r2, #32
 800978a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800978c:	4b0d      	ldr	r3, [pc, #52]	@ (80097c4 <FLASH_WaitForLastOperation+0x88>)
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009798:	4b0a      	ldr	r3, [pc, #40]	@ (80097c4 <FLASH_WaitForLastOperation+0x88>)
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80097a4:	4b07      	ldr	r3, [pc, #28]	@ (80097c4 <FLASH_WaitForLastOperation+0x88>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80097b0:	f000 f80a 	bl	80097c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e000      	b.n	80097ba <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	40022000 	.word	0x40022000

080097c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80097d2:	4b23      	ldr	r3, [pc, #140]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d009      	beq.n	80097f2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80097de:	4b21      	ldr	r3, [pc, #132]	@ (8009864 <FLASH_SetErrorCode+0x9c>)
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	f043 0302 	orr.w	r3, r3, #2
 80097e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009864 <FLASH_SetErrorCode+0x9c>)
 80097e8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f043 0310 	orr.w	r3, r3, #16
 80097f0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80097f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80097fe:	4b19      	ldr	r3, [pc, #100]	@ (8009864 <FLASH_SetErrorCode+0x9c>)
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	4a17      	ldr	r2, [pc, #92]	@ (8009864 <FLASH_SetErrorCode+0x9c>)
 8009808:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f043 0304 	orr.w	r3, r3, #4
 8009810:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8009812:	4b13      	ldr	r3, [pc, #76]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800981e:	4b11      	ldr	r3, [pc, #68]	@ (8009864 <FLASH_SetErrorCode+0x9c>)
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f043 0304 	orr.w	r3, r3, #4
 8009826:	4a0f      	ldr	r2, [pc, #60]	@ (8009864 <FLASH_SetErrorCode+0x9c>)
 8009828:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800982a:	4b0d      	ldr	r3, [pc, #52]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	4a0c      	ldr	r2, [pc, #48]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 8009830:	f023 0301 	bic.w	r3, r3, #1
 8009834:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f240 1201 	movw	r2, #257	@ 0x101
 800983c:	4293      	cmp	r3, r2
 800983e:	d106      	bne.n	800984e <FLASH_SetErrorCode+0x86>
 8009840:	4b07      	ldr	r3, [pc, #28]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	4a06      	ldr	r2, [pc, #24]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 8009846:	f023 0301 	bic.w	r3, r3, #1
 800984a:	61d3      	str	r3, [r2, #28]
}  
 800984c:	e002      	b.n	8009854 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800984e:	4a04      	ldr	r2, [pc, #16]	@ (8009860 <FLASH_SetErrorCode+0x98>)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	60d3      	str	r3, [r2, #12]
}  
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	40022000 	.word	0x40022000
 8009864:	20004900 	.word	0x20004900

08009868 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800987a:	4b2f      	ldr	r3, [pc, #188]	@ (8009938 <HAL_FLASHEx_Erase+0xd0>)
 800987c:	7e1b      	ldrb	r3, [r3, #24]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d101      	bne.n	8009886 <HAL_FLASHEx_Erase+0x1e>
 8009882:	2302      	movs	r3, #2
 8009884:	e053      	b.n	800992e <HAL_FLASHEx_Erase+0xc6>
 8009886:	4b2c      	ldr	r3, [pc, #176]	@ (8009938 <HAL_FLASHEx_Erase+0xd0>)
 8009888:	2201      	movs	r2, #1
 800988a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d116      	bne.n	80098c2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009894:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009898:	f7ff ff50 	bl	800973c <FLASH_WaitForLastOperation>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d141      	bne.n	8009926 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80098a2:	2001      	movs	r0, #1
 80098a4:	f000 f84c 	bl	8009940 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80098a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80098ac:	f7ff ff46 	bl	800973c <FLASH_WaitForLastOperation>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80098b4:	4b21      	ldr	r3, [pc, #132]	@ (800993c <HAL_FLASHEx_Erase+0xd4>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4a20      	ldr	r2, [pc, #128]	@ (800993c <HAL_FLASHEx_Erase+0xd4>)
 80098ba:	f023 0304 	bic.w	r3, r3, #4
 80098be:	6113      	str	r3, [r2, #16]
 80098c0:	e031      	b.n	8009926 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80098c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80098c6:	f7ff ff39 	bl	800973c <FLASH_WaitForLastOperation>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d12a      	bne.n	8009926 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	60bb      	str	r3, [r7, #8]
 80098de:	e019      	b.n	8009914 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80098e0:	68b8      	ldr	r0, [r7, #8]
 80098e2:	f000 f849 	bl	8009978 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80098e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80098ea:	f7ff ff27 	bl	800973c <FLASH_WaitForLastOperation>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80098f2:	4b12      	ldr	r3, [pc, #72]	@ (800993c <HAL_FLASHEx_Erase+0xd4>)
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	4a11      	ldr	r2, [pc, #68]	@ (800993c <HAL_FLASHEx_Erase+0xd4>)
 80098f8:	f023 0302 	bic.w	r3, r3, #2
 80098fc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	601a      	str	r2, [r3, #0]
            break;
 800990a:	e00c      	b.n	8009926 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009912:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	029a      	lsls	r2, r3, #10
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	4413      	add	r3, r2
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	d3dc      	bcc.n	80098e0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009926:	4b04      	ldr	r3, [pc, #16]	@ (8009938 <HAL_FLASHEx_Erase+0xd0>)
 8009928:	2200      	movs	r2, #0
 800992a:	761a      	strb	r2, [r3, #24]

  return status;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20004900 	.word	0x20004900
 800993c:	40022000 	.word	0x40022000

08009940 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009948:	4b09      	ldr	r3, [pc, #36]	@ (8009970 <FLASH_MassErase+0x30>)
 800994a:	2200      	movs	r2, #0
 800994c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800994e:	4b09      	ldr	r3, [pc, #36]	@ (8009974 <FLASH_MassErase+0x34>)
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	4a08      	ldr	r2, [pc, #32]	@ (8009974 <FLASH_MassErase+0x34>)
 8009954:	f043 0304 	orr.w	r3, r3, #4
 8009958:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800995a:	4b06      	ldr	r3, [pc, #24]	@ (8009974 <FLASH_MassErase+0x34>)
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	4a05      	ldr	r2, [pc, #20]	@ (8009974 <FLASH_MassErase+0x34>)
 8009960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009964:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009966:	bf00      	nop
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr
 8009970:	20004900 	.word	0x20004900
 8009974:	40022000 	.word	0x40022000

08009978 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009980:	4b0b      	ldr	r3, [pc, #44]	@ (80099b0 <FLASH_PageErase+0x38>)
 8009982:	2200      	movs	r2, #0
 8009984:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009986:	4b0b      	ldr	r3, [pc, #44]	@ (80099b4 <FLASH_PageErase+0x3c>)
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	4a0a      	ldr	r2, [pc, #40]	@ (80099b4 <FLASH_PageErase+0x3c>)
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8009992:	4a08      	ldr	r2, [pc, #32]	@ (80099b4 <FLASH_PageErase+0x3c>)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009998:	4b06      	ldr	r3, [pc, #24]	@ (80099b4 <FLASH_PageErase+0x3c>)
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	4a05      	ldr	r2, [pc, #20]	@ (80099b4 <FLASH_PageErase+0x3c>)
 800999e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20004900 	.word	0x20004900
 80099b4:	40022000 	.word	0x40022000

080099b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b08b      	sub	sp, #44	@ 0x2c
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80099c2:	2300      	movs	r3, #0
 80099c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80099c6:	2300      	movs	r3, #0
 80099c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099ca:	e169      	b.n	8009ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80099cc:	2201      	movs	r2, #1
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	4013      	ands	r3, r2
 80099de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	f040 8158 	bne.w	8009c9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	4a9a      	ldr	r2, [pc, #616]	@ (8009c58 <HAL_GPIO_Init+0x2a0>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d05e      	beq.n	8009ab2 <HAL_GPIO_Init+0xfa>
 80099f4:	4a98      	ldr	r2, [pc, #608]	@ (8009c58 <HAL_GPIO_Init+0x2a0>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d875      	bhi.n	8009ae6 <HAL_GPIO_Init+0x12e>
 80099fa:	4a98      	ldr	r2, [pc, #608]	@ (8009c5c <HAL_GPIO_Init+0x2a4>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d058      	beq.n	8009ab2 <HAL_GPIO_Init+0xfa>
 8009a00:	4a96      	ldr	r2, [pc, #600]	@ (8009c5c <HAL_GPIO_Init+0x2a4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d86f      	bhi.n	8009ae6 <HAL_GPIO_Init+0x12e>
 8009a06:	4a96      	ldr	r2, [pc, #600]	@ (8009c60 <HAL_GPIO_Init+0x2a8>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d052      	beq.n	8009ab2 <HAL_GPIO_Init+0xfa>
 8009a0c:	4a94      	ldr	r2, [pc, #592]	@ (8009c60 <HAL_GPIO_Init+0x2a8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d869      	bhi.n	8009ae6 <HAL_GPIO_Init+0x12e>
 8009a12:	4a94      	ldr	r2, [pc, #592]	@ (8009c64 <HAL_GPIO_Init+0x2ac>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d04c      	beq.n	8009ab2 <HAL_GPIO_Init+0xfa>
 8009a18:	4a92      	ldr	r2, [pc, #584]	@ (8009c64 <HAL_GPIO_Init+0x2ac>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d863      	bhi.n	8009ae6 <HAL_GPIO_Init+0x12e>
 8009a1e:	4a92      	ldr	r2, [pc, #584]	@ (8009c68 <HAL_GPIO_Init+0x2b0>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d046      	beq.n	8009ab2 <HAL_GPIO_Init+0xfa>
 8009a24:	4a90      	ldr	r2, [pc, #576]	@ (8009c68 <HAL_GPIO_Init+0x2b0>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d85d      	bhi.n	8009ae6 <HAL_GPIO_Init+0x12e>
 8009a2a:	2b12      	cmp	r3, #18
 8009a2c:	d82a      	bhi.n	8009a84 <HAL_GPIO_Init+0xcc>
 8009a2e:	2b12      	cmp	r3, #18
 8009a30:	d859      	bhi.n	8009ae6 <HAL_GPIO_Init+0x12e>
 8009a32:	a201      	add	r2, pc, #4	@ (adr r2, 8009a38 <HAL_GPIO_Init+0x80>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009ab3 	.word	0x08009ab3
 8009a3c:	08009a8d 	.word	0x08009a8d
 8009a40:	08009a9f 	.word	0x08009a9f
 8009a44:	08009ae1 	.word	0x08009ae1
 8009a48:	08009ae7 	.word	0x08009ae7
 8009a4c:	08009ae7 	.word	0x08009ae7
 8009a50:	08009ae7 	.word	0x08009ae7
 8009a54:	08009ae7 	.word	0x08009ae7
 8009a58:	08009ae7 	.word	0x08009ae7
 8009a5c:	08009ae7 	.word	0x08009ae7
 8009a60:	08009ae7 	.word	0x08009ae7
 8009a64:	08009ae7 	.word	0x08009ae7
 8009a68:	08009ae7 	.word	0x08009ae7
 8009a6c:	08009ae7 	.word	0x08009ae7
 8009a70:	08009ae7 	.word	0x08009ae7
 8009a74:	08009ae7 	.word	0x08009ae7
 8009a78:	08009ae7 	.word	0x08009ae7
 8009a7c:	08009a95 	.word	0x08009a95
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	4a79      	ldr	r2, [pc, #484]	@ (8009c6c <HAL_GPIO_Init+0x2b4>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d013      	beq.n	8009ab2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009a8a:	e02c      	b.n	8009ae6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	623b      	str	r3, [r7, #32]
          break;
 8009a92:	e029      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	623b      	str	r3, [r7, #32]
          break;
 8009a9c:	e024      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	623b      	str	r3, [r7, #32]
          break;
 8009aa6:	e01f      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	330c      	adds	r3, #12
 8009aae:	623b      	str	r3, [r7, #32]
          break;
 8009ab0:	e01a      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d102      	bne.n	8009ac0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009aba:	2304      	movs	r3, #4
 8009abc:	623b      	str	r3, [r7, #32]
          break;
 8009abe:	e013      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d105      	bne.n	8009ad4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ac8:	2308      	movs	r3, #8
 8009aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69fa      	ldr	r2, [r7, #28]
 8009ad0:	611a      	str	r2, [r3, #16]
          break;
 8009ad2:	e009      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	615a      	str	r2, [r3, #20]
          break;
 8009ade:	e003      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	623b      	str	r3, [r7, #32]
          break;
 8009ae4:	e000      	b.n	8009ae8 <HAL_GPIO_Init+0x130>
          break;
 8009ae6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2bff      	cmp	r3, #255	@ 0xff
 8009aec:	d801      	bhi.n	8009af2 <HAL_GPIO_Init+0x13a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	e001      	b.n	8009af6 <HAL_GPIO_Init+0x13e>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3304      	adds	r3, #4
 8009af6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2bff      	cmp	r3, #255	@ 0xff
 8009afc:	d802      	bhi.n	8009b04 <HAL_GPIO_Init+0x14c>
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	e002      	b.n	8009b0a <HAL_GPIO_Init+0x152>
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	3b08      	subs	r3, #8
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	210f      	movs	r1, #15
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	fa01 f303 	lsl.w	r3, r1, r3
 8009b18:	43db      	mvns	r3, r3
 8009b1a:	401a      	ands	r2, r3
 8009b1c:	6a39      	ldr	r1, [r7, #32]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	fa01 f303 	lsl.w	r3, r1, r3
 8009b24:	431a      	orrs	r2, r3
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 80b1 	beq.w	8009c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009b38:	4b4d      	ldr	r3, [pc, #308]	@ (8009c70 <HAL_GPIO_Init+0x2b8>)
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8009c70 <HAL_GPIO_Init+0x2b8>)
 8009b3e:	f043 0301 	orr.w	r3, r3, #1
 8009b42:	6193      	str	r3, [r2, #24]
 8009b44:	4b4a      	ldr	r3, [pc, #296]	@ (8009c70 <HAL_GPIO_Init+0x2b8>)
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	60bb      	str	r3, [r7, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009b50:	4a48      	ldr	r2, [pc, #288]	@ (8009c74 <HAL_GPIO_Init+0x2bc>)
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b54:	089b      	lsrs	r3, r3, #2
 8009b56:	3302      	adds	r3, #2
 8009b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	f003 0303 	and.w	r3, r3, #3
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	220f      	movs	r2, #15
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4013      	ands	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a40      	ldr	r2, [pc, #256]	@ (8009c78 <HAL_GPIO_Init+0x2c0>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d013      	beq.n	8009ba4 <HAL_GPIO_Init+0x1ec>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c7c <HAL_GPIO_Init+0x2c4>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d00d      	beq.n	8009ba0 <HAL_GPIO_Init+0x1e8>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a3e      	ldr	r2, [pc, #248]	@ (8009c80 <HAL_GPIO_Init+0x2c8>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d007      	beq.n	8009b9c <HAL_GPIO_Init+0x1e4>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c84 <HAL_GPIO_Init+0x2cc>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d101      	bne.n	8009b98 <HAL_GPIO_Init+0x1e0>
 8009b94:	2303      	movs	r3, #3
 8009b96:	e006      	b.n	8009ba6 <HAL_GPIO_Init+0x1ee>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	e004      	b.n	8009ba6 <HAL_GPIO_Init+0x1ee>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e002      	b.n	8009ba6 <HAL_GPIO_Init+0x1ee>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <HAL_GPIO_Init+0x1ee>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba8:	f002 0203 	and.w	r2, r2, #3
 8009bac:	0092      	lsls	r2, r2, #2
 8009bae:	4093      	lsls	r3, r2
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009bb6:	492f      	ldr	r1, [pc, #188]	@ (8009c74 <HAL_GPIO_Init+0x2bc>)
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	089b      	lsrs	r3, r3, #2
 8009bbc:	3302      	adds	r3, #2
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	492c      	ldr	r1, [pc, #176]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	608b      	str	r3, [r1, #8]
 8009bdc:	e006      	b.n	8009bec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009bde:	4b2a      	ldr	r3, [pc, #168]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009be0:	689a      	ldr	r2, [r3, #8]
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	43db      	mvns	r3, r3
 8009be6:	4928      	ldr	r1, [pc, #160]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d006      	beq.n	8009c06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009bf8:	4b23      	ldr	r3, [pc, #140]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	4922      	ldr	r1, [pc, #136]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60cb      	str	r3, [r1, #12]
 8009c04:	e006      	b.n	8009c14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009c06:	4b20      	ldr	r3, [pc, #128]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c08:	68da      	ldr	r2, [r3, #12]
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	491e      	ldr	r1, [pc, #120]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d006      	beq.n	8009c2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009c20:	4b19      	ldr	r3, [pc, #100]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	4918      	ldr	r1, [pc, #96]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	604b      	str	r3, [r1, #4]
 8009c2c:	e006      	b.n	8009c3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009c2e:	4b16      	ldr	r3, [pc, #88]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	43db      	mvns	r3, r3
 8009c36:	4914      	ldr	r1, [pc, #80]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c38:	4013      	ands	r3, r2
 8009c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d021      	beq.n	8009c8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009c48:	4b0f      	ldr	r3, [pc, #60]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	490e      	ldr	r1, [pc, #56]	@ (8009c88 <HAL_GPIO_Init+0x2d0>)
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	600b      	str	r3, [r1, #0]
 8009c54:	e021      	b.n	8009c9a <HAL_GPIO_Init+0x2e2>
 8009c56:	bf00      	nop
 8009c58:	10320000 	.word	0x10320000
 8009c5c:	10310000 	.word	0x10310000
 8009c60:	10220000 	.word	0x10220000
 8009c64:	10210000 	.word	0x10210000
 8009c68:	10120000 	.word	0x10120000
 8009c6c:	10110000 	.word	0x10110000
 8009c70:	40021000 	.word	0x40021000
 8009c74:	40010000 	.word	0x40010000
 8009c78:	40010800 	.word	0x40010800
 8009c7c:	40010c00 	.word	0x40010c00
 8009c80:	40011000 	.word	0x40011000
 8009c84:	40011400 	.word	0x40011400
 8009c88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009cbc <HAL_GPIO_Init+0x304>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	43db      	mvns	r3, r3
 8009c94:	4909      	ldr	r1, [pc, #36]	@ (8009cbc <HAL_GPIO_Init+0x304>)
 8009c96:	4013      	ands	r3, r2
 8009c98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f47f ae8e 	bne.w	80099cc <HAL_GPIO_Init+0x14>
  }
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	372c      	adds	r7, #44	@ 0x2c
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr
 8009cbc:	40010400 	.word	0x40010400

08009cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	807b      	strh	r3, [r7, #2]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cd0:	787b      	ldrb	r3, [r7, #1]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cd6:	887a      	ldrh	r2, [r7, #2]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009cdc:	e003      	b.n	8009ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009cde:	887b      	ldrh	r3, [r7, #2]
 8009ce0:	041a      	lsls	r2, r3, #16
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	611a      	str	r2, [r3, #16]
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr

08009cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009cfa:	4b08      	ldr	r3, [pc, #32]	@ (8009d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009cfc:	695a      	ldr	r2, [r3, #20]
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	4013      	ands	r3, r2
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d006      	beq.n	8009d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d06:	4a05      	ldr	r2, [pc, #20]	@ (8009d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d08:	88fb      	ldrh	r3, [r7, #6]
 8009d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f806 	bl	8009d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	40010400 	.word	0x40010400

08009d20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009d2a:	bf00      	nop
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bc80      	pop	{r7}
 8009d32:	4770      	bx	lr

08009d34 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009d34:	b480      	push	{r7}
 8009d36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009d38:	4b03      	ldr	r3, [pc, #12]	@ (8009d48 <HAL_PWR_EnableBkUpAccess+0x14>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
}
 8009d3e:	bf00      	nop
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bc80      	pop	{r7}
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	420e0020 	.word	0x420e0020

08009d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e272      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 8087 	beq.w	8009e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d6c:	4b92      	ldr	r3, [pc, #584]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f003 030c 	and.w	r3, r3, #12
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	d00c      	beq.n	8009d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009d78:	4b8f      	ldr	r3, [pc, #572]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f003 030c 	and.w	r3, r3, #12
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d112      	bne.n	8009daa <HAL_RCC_OscConfig+0x5e>
 8009d84:	4b8c      	ldr	r3, [pc, #560]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d90:	d10b      	bne.n	8009daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d92:	4b89      	ldr	r3, [pc, #548]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d06c      	beq.n	8009e78 <HAL_RCC_OscConfig+0x12c>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d168      	bne.n	8009e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e24c      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db2:	d106      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x76>
 8009db4:	4b80      	ldr	r3, [pc, #512]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a7f      	ldr	r2, [pc, #508]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e02e      	b.n	8009e20 <HAL_RCC_OscConfig+0xd4>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10c      	bne.n	8009de4 <HAL_RCC_OscConfig+0x98>
 8009dca:	4b7b      	ldr	r3, [pc, #492]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a7a      	ldr	r2, [pc, #488]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	4b78      	ldr	r3, [pc, #480]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a77      	ldr	r2, [pc, #476]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	e01d      	b.n	8009e20 <HAL_RCC_OscConfig+0xd4>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009dec:	d10c      	bne.n	8009e08 <HAL_RCC_OscConfig+0xbc>
 8009dee:	4b72      	ldr	r3, [pc, #456]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a71      	ldr	r2, [pc, #452]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e00b      	b.n	8009e20 <HAL_RCC_OscConfig+0xd4>
 8009e08:	4b6b      	ldr	r3, [pc, #428]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a6a      	ldr	r2, [pc, #424]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	4b68      	ldr	r3, [pc, #416]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a67      	ldr	r2, [pc, #412]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d013      	beq.n	8009e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e28:	f7fe ff6a 	bl	8008d00 <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e30:	f7fe ff66 	bl	8008d00 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b64      	cmp	r3, #100	@ 0x64
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e200      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e42:	4b5d      	ldr	r3, [pc, #372]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HAL_RCC_OscConfig+0xe4>
 8009e4e:	e014      	b.n	8009e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e50:	f7fe ff56 	bl	8008d00 <HAL_GetTick>
 8009e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e58:	f7fe ff52 	bl	8008d00 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b64      	cmp	r3, #100	@ 0x64
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e1ec      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e6a:	4b53      	ldr	r3, [pc, #332]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f0      	bne.n	8009e58 <HAL_RCC_OscConfig+0x10c>
 8009e76:	e000      	b.n	8009e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d063      	beq.n	8009f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e86:	4b4c      	ldr	r3, [pc, #304]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f003 030c 	and.w	r3, r3, #12
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00b      	beq.n	8009eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009e92:	4b49      	ldr	r3, [pc, #292]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f003 030c 	and.w	r3, r3, #12
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	d11c      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x18c>
 8009e9e:	4b46      	ldr	r3, [pc, #280]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d116      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009eaa:	4b43      	ldr	r3, [pc, #268]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x176>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d001      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e1c0      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	4939      	ldr	r1, [pc, #228]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ed6:	e03a      	b.n	8009f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d020      	beq.n	8009f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ee0:	4b36      	ldr	r3, [pc, #216]	@ (8009fbc <HAL_RCC_OscConfig+0x270>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ee6:	f7fe ff0b 	bl	8008d00 <HAL_GetTick>
 8009eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eec:	e008      	b.n	8009f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009eee:	f7fe ff07 	bl	8008d00 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d901      	bls.n	8009f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e1a1      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f00:	4b2d      	ldr	r3, [pc, #180]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0f0      	beq.n	8009eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	4927      	ldr	r1, [pc, #156]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	600b      	str	r3, [r1, #0]
 8009f20:	e015      	b.n	8009f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f22:	4b26      	ldr	r3, [pc, #152]	@ (8009fbc <HAL_RCC_OscConfig+0x270>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f28:	f7fe feea 	bl	8008d00 <HAL_GetTick>
 8009f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f30:	f7fe fee6 	bl	8008d00 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e180      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f42:	4b1d      	ldr	r3, [pc, #116]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f0      	bne.n	8009f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d03a      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d019      	beq.n	8009f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f62:	4b17      	ldr	r3, [pc, #92]	@ (8009fc0 <HAL_RCC_OscConfig+0x274>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f68:	f7fe feca 	bl	8008d00 <HAL_GetTick>
 8009f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f70:	f7fe fec6 	bl	8008d00 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e160      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f82:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009f8e:	2001      	movs	r0, #1
 8009f90:	f000 face 	bl	800a530 <RCC_Delay>
 8009f94:	e01c      	b.n	8009fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f96:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <HAL_RCC_OscConfig+0x274>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f9c:	f7fe feb0 	bl	8008d00 <HAL_GetTick>
 8009fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fa2:	e00f      	b.n	8009fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fa4:	f7fe feac 	bl	8008d00 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d908      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e146      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
 8009fb6:	bf00      	nop
 8009fb8:	40021000 	.word	0x40021000
 8009fbc:	42420000 	.word	0x42420000
 8009fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fc4:	4b92      	ldr	r3, [pc, #584]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e9      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80a6 	beq.w	800a12a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fe2:	4b8b      	ldr	r3, [pc, #556]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10d      	bne.n	800a00a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fee:	4b88      	ldr	r3, [pc, #544]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	4a87      	ldr	r2, [pc, #540]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ff8:	61d3      	str	r3, [r2, #28]
 8009ffa:	4b85      	ldr	r3, [pc, #532]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a002:	60bb      	str	r3, [r7, #8]
 800a004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a006:	2301      	movs	r3, #1
 800a008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a00a:	4b82      	ldr	r3, [pc, #520]	@ (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a012:	2b00      	cmp	r3, #0
 800a014:	d118      	bne.n	800a048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a016:	4b7f      	ldr	r3, [pc, #508]	@ (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a7e      	ldr	r2, [pc, #504]	@ (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a01c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a022:	f7fe fe6d 	bl	8008d00 <HAL_GetTick>
 800a026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a028:	e008      	b.n	800a03c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a02a:	f7fe fe69 	bl	8008d00 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b64      	cmp	r3, #100	@ 0x64
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e103      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a03c:	4b75      	ldr	r3, [pc, #468]	@ (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0f0      	beq.n	800a02a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d106      	bne.n	800a05e <HAL_RCC_OscConfig+0x312>
 800a050:	4b6f      	ldr	r3, [pc, #444]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	4a6e      	ldr	r2, [pc, #440]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	6213      	str	r3, [r2, #32]
 800a05c:	e02d      	b.n	800a0ba <HAL_RCC_OscConfig+0x36e>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10c      	bne.n	800a080 <HAL_RCC_OscConfig+0x334>
 800a066:	4b6a      	ldr	r3, [pc, #424]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	4a69      	ldr	r2, [pc, #420]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a06c:	f023 0301 	bic.w	r3, r3, #1
 800a070:	6213      	str	r3, [r2, #32]
 800a072:	4b67      	ldr	r3, [pc, #412]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	4a66      	ldr	r2, [pc, #408]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a078:	f023 0304 	bic.w	r3, r3, #4
 800a07c:	6213      	str	r3, [r2, #32]
 800a07e:	e01c      	b.n	800a0ba <HAL_RCC_OscConfig+0x36e>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	2b05      	cmp	r3, #5
 800a086:	d10c      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x356>
 800a088:	4b61      	ldr	r3, [pc, #388]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	4a60      	ldr	r2, [pc, #384]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a08e:	f043 0304 	orr.w	r3, r3, #4
 800a092:	6213      	str	r3, [r2, #32]
 800a094:	4b5e      	ldr	r3, [pc, #376]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	4a5d      	ldr	r2, [pc, #372]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a09a:	f043 0301 	orr.w	r3, r3, #1
 800a09e:	6213      	str	r3, [r2, #32]
 800a0a0:	e00b      	b.n	800a0ba <HAL_RCC_OscConfig+0x36e>
 800a0a2:	4b5b      	ldr	r3, [pc, #364]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	4a5a      	ldr	r2, [pc, #360]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0a8:	f023 0301 	bic.w	r3, r3, #1
 800a0ac:	6213      	str	r3, [r2, #32]
 800a0ae:	4b58      	ldr	r3, [pc, #352]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	4a57      	ldr	r2, [pc, #348]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0b4:	f023 0304 	bic.w	r3, r3, #4
 800a0b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d015      	beq.n	800a0ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0c2:	f7fe fe1d 	bl	8008d00 <HAL_GetTick>
 800a0c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0c8:	e00a      	b.n	800a0e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ca:	f7fe fe19 	bl	8008d00 <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d901      	bls.n	800a0e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e0b1      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0e0:	4b4b      	ldr	r3, [pc, #300]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0ee      	beq.n	800a0ca <HAL_RCC_OscConfig+0x37e>
 800a0ec:	e014      	b.n	800a118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0ee:	f7fe fe07 	bl	8008d00 <HAL_GetTick>
 800a0f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0f4:	e00a      	b.n	800a10c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f6:	f7fe fe03 	bl	8008d00 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a104:	4293      	cmp	r3, r2
 800a106:	d901      	bls.n	800a10c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e09b      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a10c:	4b40      	ldr	r3, [pc, #256]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1ee      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d105      	bne.n	800a12a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a11e:	4b3c      	ldr	r3, [pc, #240]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	4a3b      	ldr	r2, [pc, #236]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 8087 	beq.w	800a242 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a134:	4b36      	ldr	r3, [pc, #216]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f003 030c 	and.w	r3, r3, #12
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d061      	beq.n	800a204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d146      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a148:	4b33      	ldr	r3, [pc, #204]	@ (800a218 <HAL_RCC_OscConfig+0x4cc>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a14e:	f7fe fdd7 	bl	8008d00 <HAL_GetTick>
 800a152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a154:	e008      	b.n	800a168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a156:	f7fe fdd3 	bl	8008d00 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d901      	bls.n	800a168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e06d      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a168:	4b29      	ldr	r3, [pc, #164]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1f0      	bne.n	800a156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a17c:	d108      	bne.n	800a190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a17e:	4b24      	ldr	r3, [pc, #144]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	4921      	ldr	r1, [pc, #132]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a190:	4b1f      	ldr	r3, [pc, #124]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a19      	ldr	r1, [r3, #32]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	491b      	ldr	r1, [pc, #108]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a218 <HAL_RCC_OscConfig+0x4cc>)
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1ae:	f7fe fda7 	bl	8008d00 <HAL_GetTick>
 800a1b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b6:	f7fe fda3 	bl	8008d00 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e03d      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a1c8:	4b11      	ldr	r3, [pc, #68]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0f0      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x46a>
 800a1d4:	e035      	b.n	800a242 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1d6:	4b10      	ldr	r3, [pc, #64]	@ (800a218 <HAL_RCC_OscConfig+0x4cc>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1dc:	f7fe fd90 	bl	8008d00 <HAL_GetTick>
 800a1e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1e2:	e008      	b.n	800a1f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e4:	f7fe fd8c 	bl	8008d00 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d901      	bls.n	800a1f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e026      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1f6:	4b06      	ldr	r3, [pc, #24]	@ (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f0      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x498>
 800a202:	e01e      	b.n	800a242 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d107      	bne.n	800a21c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e019      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
 800a210:	40021000 	.word	0x40021000
 800a214:	40007000 	.word	0x40007000
 800a218:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a21c:	4b0b      	ldr	r3, [pc, #44]	@ (800a24c <HAL_RCC_OscConfig+0x500>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d106      	bne.n	800a23e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d001      	beq.n	800a242 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	40021000 	.word	0x40021000

0800a250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e0d0      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a264:	4b6a      	ldr	r3, [pc, #424]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d910      	bls.n	800a294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a272:	4b67      	ldr	r3, [pc, #412]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f023 0207 	bic.w	r2, r3, #7
 800a27a:	4965      	ldr	r1, [pc, #404]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	4313      	orrs	r3, r2
 800a280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a282:	4b63      	ldr	r3, [pc, #396]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d001      	beq.n	800a294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e0b8      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d020      	beq.n	800a2e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2ac:	4b59      	ldr	r3, [pc, #356]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4a58      	ldr	r2, [pc, #352]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a2b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a2c4:	4b53      	ldr	r3, [pc, #332]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4a52      	ldr	r2, [pc, #328]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a2ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2d0:	4b50      	ldr	r3, [pc, #320]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	494d      	ldr	r1, [pc, #308]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d040      	beq.n	800a370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d107      	bne.n	800a306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2f6:	4b47      	ldr	r3, [pc, #284]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d115      	bne.n	800a32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e07f      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d107      	bne.n	800a31e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a30e:	4b41      	ldr	r3, [pc, #260]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d109      	bne.n	800a32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e073      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a31e:	4b3d      	ldr	r3, [pc, #244]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e06b      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a32e:	4b39      	ldr	r3, [pc, #228]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f023 0203 	bic.w	r2, r3, #3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	4936      	ldr	r1, [pc, #216]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a340:	f7fe fcde 	bl	8008d00 <HAL_GetTick>
 800a344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a346:	e00a      	b.n	800a35e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a348:	f7fe fcda 	bl	8008d00 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a356:	4293      	cmp	r3, r2
 800a358:	d901      	bls.n	800a35e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e053      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35e:	4b2d      	ldr	r3, [pc, #180]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f003 020c 	and.w	r2, r3, #12
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d1eb      	bne.n	800a348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a370:	4b27      	ldr	r3, [pc, #156]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d210      	bcs.n	800a3a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a37e:	4b24      	ldr	r3, [pc, #144]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f023 0207 	bic.w	r2, r3, #7
 800a386:	4922      	ldr	r1, [pc, #136]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a38e:	4b20      	ldr	r3, [pc, #128]	@ (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d001      	beq.n	800a3a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e032      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3ac:	4b19      	ldr	r3, [pc, #100]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	4916      	ldr	r1, [pc, #88]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d009      	beq.n	800a3de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a3ca:	4b12      	ldr	r3, [pc, #72]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	490e      	ldr	r1, [pc, #56]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a3de:	f000 f821 	bl	800a424 <HAL_RCC_GetSysClockFreq>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	091b      	lsrs	r3, r3, #4
 800a3ea:	f003 030f 	and.w	r3, r3, #15
 800a3ee:	490a      	ldr	r1, [pc, #40]	@ (800a418 <HAL_RCC_ClockConfig+0x1c8>)
 800a3f0:	5ccb      	ldrb	r3, [r1, r3]
 800a3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f6:	4a09      	ldr	r2, [pc, #36]	@ (800a41c <HAL_RCC_ClockConfig+0x1cc>)
 800a3f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a3fa:	4b09      	ldr	r3, [pc, #36]	@ (800a420 <HAL_RCC_ClockConfig+0x1d0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fc3c 	bl	8008c7c <HAL_InitTick>

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	40022000 	.word	0x40022000
 800a414:	40021000 	.word	0x40021000
 800a418:	0800a7b4 	.word	0x0800a7b4
 800a41c:	20000000 	.word	0x20000000
 800a420:	20000004 	.word	0x20000004

0800a424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	2300      	movs	r3, #0
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	2300      	movs	r3, #0
 800a438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a43e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 030c 	and.w	r3, r3, #12
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d002      	beq.n	800a454 <HAL_RCC_GetSysClockFreq+0x30>
 800a44e:	2b08      	cmp	r3, #8
 800a450:	d003      	beq.n	800a45a <HAL_RCC_GetSysClockFreq+0x36>
 800a452:	e027      	b.n	800a4a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a454:	4b19      	ldr	r3, [pc, #100]	@ (800a4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a456:	613b      	str	r3, [r7, #16]
      break;
 800a458:	e027      	b.n	800a4aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	0c9b      	lsrs	r3, r3, #18
 800a45e:	f003 030f 	and.w	r3, r3, #15
 800a462:	4a17      	ldr	r2, [pc, #92]	@ (800a4c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a464:	5cd3      	ldrb	r3, [r2, r3]
 800a466:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d010      	beq.n	800a494 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a472:	4b11      	ldr	r3, [pc, #68]	@ (800a4b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	0c5b      	lsrs	r3, r3, #17
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	4a11      	ldr	r2, [pc, #68]	@ (800a4c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a47e:	5cd3      	ldrb	r3, [r2, r3]
 800a480:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a0d      	ldr	r2, [pc, #52]	@ (800a4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a486:	fb03 f202 	mul.w	r2, r3, r2
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	e004      	b.n	800a49e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a498:	fb02 f303 	mul.w	r3, r2, r3
 800a49c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	613b      	str	r3, [r7, #16]
      break;
 800a4a2:	e002      	b.n	800a4aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a4a4:	4b05      	ldr	r3, [pc, #20]	@ (800a4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a4a6:	613b      	str	r3, [r7, #16]
      break;
 800a4a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4aa:	693b      	ldr	r3, [r7, #16]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	371c      	adds	r7, #28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bc80      	pop	{r7}
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	40021000 	.word	0x40021000
 800a4bc:	007a1200 	.word	0x007a1200
 800a4c0:	0800a7cc 	.word	0x0800a7cc
 800a4c4:	0800a7dc 	.word	0x0800a7dc
 800a4c8:	003d0900 	.word	0x003d0900

0800a4cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4d0:	4b02      	ldr	r3, [pc, #8]	@ (800a4dc <HAL_RCC_GetHCLKFreq+0x10>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bc80      	pop	{r7}
 800a4da:	4770      	bx	lr
 800a4dc:	20000000 	.word	0x20000000

0800a4e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a4e4:	f7ff fff2 	bl	800a4cc <HAL_RCC_GetHCLKFreq>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	4b05      	ldr	r3, [pc, #20]	@ (800a500 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	0a1b      	lsrs	r3, r3, #8
 800a4f0:	f003 0307 	and.w	r3, r3, #7
 800a4f4:	4903      	ldr	r1, [pc, #12]	@ (800a504 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4f6:	5ccb      	ldrb	r3, [r1, r3]
 800a4f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	40021000 	.word	0x40021000
 800a504:	0800a7c4 	.word	0x0800a7c4

0800a508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a50c:	f7ff ffde 	bl	800a4cc <HAL_RCC_GetHCLKFreq>
 800a510:	4602      	mov	r2, r0
 800a512:	4b05      	ldr	r3, [pc, #20]	@ (800a528 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	0adb      	lsrs	r3, r3, #11
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	4903      	ldr	r1, [pc, #12]	@ (800a52c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a51e:	5ccb      	ldrb	r3, [r1, r3]
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a524:	4618      	mov	r0, r3
 800a526:	bd80      	pop	{r7, pc}
 800a528:	40021000 	.word	0x40021000
 800a52c:	0800a7c4 	.word	0x0800a7c4

0800a530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a538:	4b0a      	ldr	r3, [pc, #40]	@ (800a564 <RCC_Delay+0x34>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a0a      	ldr	r2, [pc, #40]	@ (800a568 <RCC_Delay+0x38>)
 800a53e:	fba2 2303 	umull	r2, r3, r2, r3
 800a542:	0a5b      	lsrs	r3, r3, #9
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	fb02 f303 	mul.w	r3, r2, r3
 800a54a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a54c:	bf00      	nop
  }
  while (Delay --);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	60fa      	str	r2, [r7, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1f9      	bne.n	800a54c <RCC_Delay+0x1c>
}
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	bc80      	pop	{r7}
 800a562:	4770      	bx	lr
 800a564:	20000000 	.word	0x20000000
 800a568:	10624dd3 	.word	0x10624dd3

0800a56c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e042      	b.n	800a604 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d106      	bne.n	800a598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7fe faf8 	bl	8008b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2224      	movs	r2, #36	@ 0x24
 800a59c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a5ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f82b 	bl	800a60c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a5c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	695a      	ldr	r2, [r3, #20]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a5e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a646:	f023 030c 	bic.w	r3, r3, #12
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	430b      	orrs	r3, r1
 800a652:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a2c      	ldr	r2, [pc, #176]	@ (800a720 <UART_SetConfig+0x114>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d103      	bne.n	800a67c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a674:	f7ff ff48 	bl	800a508 <HAL_RCC_GetPCLK2Freq>
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	e002      	b.n	800a682 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a67c:	f7ff ff30 	bl	800a4e0 <HAL_RCC_GetPCLK1Freq>
 800a680:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009a      	lsls	r2, r3, #2
 800a68c:	441a      	add	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	fbb2 f3f3 	udiv	r3, r2, r3
 800a698:	4a22      	ldr	r2, [pc, #136]	@ (800a724 <UART_SetConfig+0x118>)
 800a69a:	fba2 2303 	umull	r2, r3, r2, r3
 800a69e:	095b      	lsrs	r3, r3, #5
 800a6a0:	0119      	lsls	r1, r3, #4
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009a      	lsls	r2, r3, #2
 800a6ac:	441a      	add	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a724 <UART_SetConfig+0x118>)
 800a6ba:	fba3 0302 	umull	r0, r3, r3, r2
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	2064      	movs	r0, #100	@ 0x64
 800a6c2:	fb00 f303 	mul.w	r3, r0, r3
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	3332      	adds	r3, #50	@ 0x32
 800a6cc:	4a15      	ldr	r2, [pc, #84]	@ (800a724 <UART_SetConfig+0x118>)
 800a6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d2:	095b      	lsrs	r3, r3, #5
 800a6d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6d8:	4419      	add	r1, r3
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009a      	lsls	r2, r3, #2
 800a6e4:	441a      	add	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a724 <UART_SetConfig+0x118>)
 800a6f2:	fba3 0302 	umull	r0, r3, r3, r2
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	2064      	movs	r0, #100	@ 0x64
 800a6fa:	fb00 f303 	mul.w	r3, r0, r3
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	3332      	adds	r3, #50	@ 0x32
 800a704:	4a07      	ldr	r2, [pc, #28]	@ (800a724 <UART_SetConfig+0x118>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	095b      	lsrs	r3, r3, #5
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	440a      	add	r2, r1
 800a716:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a718:	bf00      	nop
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	40013800 	.word	0x40013800
 800a724:	51eb851f 	.word	0x51eb851f

0800a728 <memset>:
 800a728:	4603      	mov	r3, r0
 800a72a:	4402      	add	r2, r0
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d100      	bne.n	800a732 <memset+0xa>
 800a730:	4770      	bx	lr
 800a732:	f803 1b01 	strb.w	r1, [r3], #1
 800a736:	e7f9      	b.n	800a72c <memset+0x4>

0800a738 <__libc_init_array>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	2600      	movs	r6, #0
 800a73c:	4d0c      	ldr	r5, [pc, #48]	@ (800a770 <__libc_init_array+0x38>)
 800a73e:	4c0d      	ldr	r4, [pc, #52]	@ (800a774 <__libc_init_array+0x3c>)
 800a740:	1b64      	subs	r4, r4, r5
 800a742:	10a4      	asrs	r4, r4, #2
 800a744:	42a6      	cmp	r6, r4
 800a746:	d109      	bne.n	800a75c <__libc_init_array+0x24>
 800a748:	f000 f828 	bl	800a79c <_init>
 800a74c:	2600      	movs	r6, #0
 800a74e:	4d0a      	ldr	r5, [pc, #40]	@ (800a778 <__libc_init_array+0x40>)
 800a750:	4c0a      	ldr	r4, [pc, #40]	@ (800a77c <__libc_init_array+0x44>)
 800a752:	1b64      	subs	r4, r4, r5
 800a754:	10a4      	asrs	r4, r4, #2
 800a756:	42a6      	cmp	r6, r4
 800a758:	d105      	bne.n	800a766 <__libc_init_array+0x2e>
 800a75a:	bd70      	pop	{r4, r5, r6, pc}
 800a75c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a760:	4798      	blx	r3
 800a762:	3601      	adds	r6, #1
 800a764:	e7ee      	b.n	800a744 <__libc_init_array+0xc>
 800a766:	f855 3b04 	ldr.w	r3, [r5], #4
 800a76a:	4798      	blx	r3
 800a76c:	3601      	adds	r6, #1
 800a76e:	e7f2      	b.n	800a756 <__libc_init_array+0x1e>
 800a770:	0800a7e0 	.word	0x0800a7e0
 800a774:	0800a7e0 	.word	0x0800a7e0
 800a778:	0800a7e0 	.word	0x0800a7e0
 800a77c:	0800a7e4 	.word	0x0800a7e4

0800a780 <memcpy>:
 800a780:	440a      	add	r2, r1
 800a782:	4291      	cmp	r1, r2
 800a784:	f100 33ff 	add.w	r3, r0, #4294967295
 800a788:	d100      	bne.n	800a78c <memcpy+0xc>
 800a78a:	4770      	bx	lr
 800a78c:	b510      	push	{r4, lr}
 800a78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a792:	4291      	cmp	r1, r2
 800a794:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a798:	d1f9      	bne.n	800a78e <memcpy+0xe>
 800a79a:	bd10      	pop	{r4, pc}

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	bf00      	nop
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
